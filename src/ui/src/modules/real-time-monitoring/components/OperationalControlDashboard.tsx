import React, { useState, useEffect } from 'react';
import { Activity, Users, TrendingUp, Clock, AlertTriangle, CheckCircle, XCircle, Zap } from 'lucide-react';

// BDD: Real-time operational dashboards - Adapted from EmployeeStatusManager
// Based on: 15-real-time-monitoring-operational-control.feature

interface OperationalMetric {
  id: string;
  name: string;
  value: number;
  target: number;
  unit: string;
  status: 'excellent' | 'good' | 'warning' | 'critical';
  trend: 'up' | 'down' | 'stable';
  changePercent: number;
  lastUpdated: Date;
  description: string;
}

interface AgentStatus {
  id: string;
  name: string;
  status: 'online' | 'offline' | 'break' | 'lunch' | 'training';
  currentCall: boolean;
  queue: string;
  loginTime: string;
  callsHandled: number;
  avgHandleTime: number;
  lastActivity: Date;
}

const OperationalControlDashboard: React.FC = () => {
  const [metrics, setMetrics] = useState<OperationalMetric[]>([]);
  const [agents, setAgents] = useState<AgentStatus[]>([]);
  const [selectedQueue, setSelectedQueue] = useState<string>('all');
  const [lastUpdate, setLastUpdate] = useState(new Date());
  const [isUpdating, setIsUpdating] = useState(false);

  // BDD: Six key real-time metrics with traffic light indicators
  useEffect(() => {
    const loadMetrics = () => {
      const now = new Date();
      const mockMetrics: OperationalMetric[] = [
        {
          id: 'metric_001',
          name: '–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –æ–Ω–ª–∞–π–Ω',
          value: 92.3,
          target: 85.0,
          unit: '%',
          status: 'excellent',
          trend: 'up',
          changePercent: 2.1,
          lastUpdated: now,
          description: '–ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤ —Å–µ—Ç–∏'
        },
        {
          id: 'metric_002',
          name: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏',
          value: 7.4,
          target: 10.0,
          unit: '%',
          status: 'good',
          trend: 'down',
          changePercent: -1.8,
          lastUpdated: now,
          description: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞'
        },
        {
          id: 'metric_003',
          name: '–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞—Ö',
          value: 47,
          target: 50,
          unit: 'agents',
          status: 'warning',
          trend: 'up',
          changePercent: 4.4,
          lastUpdated: now,
          description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏'
        },
        {
          id: 'metric_004',
          name: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SLA',
          value: 94.7,
          target: 90.0,
          unit: '%',
          status: 'excellent',
          trend: 'stable',
          changePercent: 0.3,
          lastUpdated: now,
          description: '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–≤–æ–Ω–∫–æ–≤, –æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å SLA'
        },
        {
          id: 'metric_005',
          name: '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç ACD',
          value: 89.2,
          target: 85.0,
          unit: '%',
          status: 'excellent',
          trend: 'up',
          changePercent: 1.5,
          lastUpdated: now,
          description: '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–≤–æ–Ω–∫–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–µ–º'
        },
        {
          id: 'metric_006',
          name: '–¢—Ä–µ–Ω–¥ AHT',
          value: 245,
          target: 300,
          unit: 'sec',
          status: 'good',
          trend: 'down',
          changePercent: -8.2,
          lastUpdated: now,
          description: '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–≤–æ–Ω–∫–∞'
        }
      ];

      setMetrics(mockMetrics);
    };

    const loadAgents = () => {
      const mockAgents: AgentStatus[] = [
        {
          id: 'agent_001',
          name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
          status: 'online',
          currentCall: true,
          queue: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
          loginTime: '09:00',
          callsHandled: 23,
          avgHandleTime: 245,
          lastActivity: new Date(Date.now() - 2 * 60 * 1000)
        },
        {
          id: 'agent_002',
          name: '–ú–∏—Ö–∞–∏–ª –í–æ–ª–∫–æ–≤',
          status: 'online',
          currentCall: false,
          queue: '–ü—Ä–æ–¥–∞–∂–∏',
          loginTime: '09:15',
          callsHandled: 18,
          avgHandleTime: 290,
          lastActivity: new Date(Date.now() - 30 * 1000)
        },
        {
          id: 'agent_003',
          name: '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
          status: 'break',
          currentCall: false,
          queue: '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
          loginTime: '08:45',
          callsHandled: 31,
          avgHandleTime: 198,
          lastActivity: new Date(Date.now() - 5 * 60 * 1000)
        },
        {
          id: 'agent_004',
          name: '–ü–∞–≤–µ–ª –û—Ä–ª–æ–≤',
          status: 'lunch',
          currentCall: false,
          queue: '–ü—Ä–æ–¥–∞–∂–∏',
          loginTime: '10:00',
          callsHandled: 12,
          avgHandleTime: 312,
          lastActivity: new Date(Date.now() - 15 * 60 * 1000)
        },
        {
          id: 'agent_005',
          name: '–°–æ—Ñ–∏—è –ò–≤–∞–Ω–æ–≤–∞',
          status: 'training',
          currentCall: false,
          queue: '–û–±—É—á–µ–Ω–∏–µ',
          loginTime: '09:30',
          callsHandled: 0,
          avgHandleTime: 0,
          lastActivity: new Date(Date.now() - 45 * 60 * 1000)
        }
      ];

      setAgents(mockAgents);
    };

    loadMetrics();
    loadAgents();
  }, []);

  // BDD: Real-time updates every 30 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setIsUpdating(true);
      setTimeout(() => {
        setLastUpdate(new Date());
        setIsUpdating(false);
      }, 500);
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'excellent': return 'bg-green-100 text-green-800 border-green-200';
      case 'good': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'warning': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIndicator = (status: string) => {
    switch (status) {
      case 'excellent': return 'üü¢';
      case 'good': return 'üîµ';
      case 'warning': return 'üü°';
      case 'critical': return 'üî¥';
      default: return '‚ö™';
    }
  };

  const getAgentStatusColor = (status: string) => {
    switch (status) {
      case 'online': return 'bg-green-100 text-green-800';
      case 'break': return 'bg-yellow-100 text-yellow-800';
      case 'lunch': return 'bg-orange-100 text-orange-800';
      case 'training': return 'bg-blue-100 text-blue-800';
      case 'offline': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getAgentStatusText = (status: string) => {
    switch (status) {
      case 'online': return '–í —Å–µ—Ç–∏';
      case 'break': return '–ü–µ—Ä–µ—Ä—ã–≤';
      case 'lunch': return '–û–±–µ–¥';
      case 'training': return '–û–±—É—á–µ–Ω–∏–µ';
      case 'offline': return '–ù–µ –≤ —Å–µ—Ç–∏';
      default: return status;
    }
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up': return '‚ÜóÔ∏è';
      case 'down': return '‚ÜòÔ∏è';
      case 'stable': return '‚û°Ô∏è';
      default: return '‚û°Ô∏è';
    }
  };

  const formatValue = (value: number, unit: string) => {
    if (unit === '%') return `${value.toFixed(1)}%`;
    if (unit === 'sec') return `${Math.round(value)}—Å`;
    if (unit === 'agents') return value.toString();
    return value.toFixed(1);
  };

  const filteredAgents = selectedQueue === 'all' 
    ? agents 
    : agents.filter(agent => agent.queue === selectedQueue);

  const agentStats = {
    total: agents.length,
    online: agents.filter(a => a.status === 'online').length,
    onCall: agents.filter(a => a.currentCall).length,
    break: agents.filter(a => a.status === 'break' || a.status === 'lunch').length,
    training: agents.filter(a => a.status === 'training').length
  };

  const uniqueQueues = [...new Set(agents.map(a => a.queue))];

  return (
    <div className="p-6 space-y-6">
      {/* Header - BDD: Main monitoring dashboard */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 flex items-center">
              <Activity className="h-6 w-6 mr-2 text-blue-600" />
              –¶–µ–Ω—Ç—Ä –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            </h1>
            <p className="text-gray-500 flex items-center mt-1">
              <span className="text-xl mr-2">üìä</span>
              –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ - –û–û–û "–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å"
            </p>
          </div>
          
          <div className="text-right">
            <div className={`flex items-center space-x-2 text-sm ${isUpdating ? 'text-blue-600' : 'text-gray-500'}`}>
              <div className={`w-2 h-2 rounded-full ${isUpdating ? 'bg-blue-500 animate-pulse' : 'bg-green-500'}`}></div>
              <span>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {lastUpdate.toLocaleTimeString('ru-RU')}</span>
            </div>
          </div>
        </div>
      </div>

      {/* Key Metrics Grid - BDD: Six key real-time metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {metrics.map((metric) => (
          <div key={metric.id} className={`bg-white rounded-lg shadow-sm border-2 p-6 ${getStatusColor(metric.status)}`}>
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-2">
                <span className="text-2xl">{getStatusIndicator(metric.status)}</span>
                <h3 className="font-semibold text-gray-900">{metric.name}</h3>
              </div>
              <div className="flex items-center space-x-1 text-sm text-gray-600">
                <span>{getTrendIcon(metric.trend)}</span>
                <span>{Math.abs(metric.changePercent).toFixed(1)}%</span>
              </div>
            </div>
            
            <div className="mb-2">
              <div className="flex items-baseline space-x-2">
                <span className="text-3xl font-bold text-gray-900">
                  {formatValue(metric.value, metric.unit)}
                </span>
                <span className="text-sm text-gray-600">
                  / {formatValue(metric.target, metric.unit)}
                </span>
              </div>
            </div>

            <div className="mb-3">
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className={`h-2 rounded-full transition-all duration-300 ${
                    metric.status === 'excellent' ? 'bg-green-500' :
                    metric.status === 'good' ? 'bg-blue-500' :
                    metric.status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'
                  }`}
                  style={{ width: `${Math.min((metric.value / metric.target) * 100, 100)}%` }}
                ></div>
              </div>
            </div>

            <p className="text-xs text-gray-600">{metric.description}</p>
          </div>
        ))}
      </div>

      {/* Agent Status Overview - BDD: Agent monitoring */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <Users className="h-6 w-6 text-blue-600" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-600">–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤</p>
              <p className="text-2xl font-bold text-blue-600">{agentStats.total}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <CheckCircle className="h-6 w-6 text-green-600" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-600">–í —Å–µ—Ç–∏</p>
              <p className="text-2xl font-bold text-green-600">{agentStats.online}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <Zap className="h-6 w-6 text-purple-600" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-600">–ù–∞ –∑–≤–æ–Ω–∫–µ</p>
              <p className="text-2xl font-bold text-purple-600">{agentStats.onCall}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <Clock className="h-6 w-6 text-yellow-600" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-600">–ü–µ—Ä–µ—Ä—ã–≤</p>
              <p className="text-2xl font-bold text-yellow-600">{agentStats.break}</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
          <div className="flex items-center">
            <TrendingUp className="h-6 w-6 text-blue-600" />
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-600">–û–±—É—á–µ–Ω–∏–µ</p>
              <p className="text-2xl font-bold text-blue-600">{agentStats.training}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Agent List with Queue Filter - BDD: Individual agent tracking */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="px-6 py-4 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-900">–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤</h3>
            <select
              value={selectedQueue}
              onChange={(e) => setSelectedQueue(e.target.value)}
              className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">–í—Å–µ –æ—á–µ—Ä–µ–¥–∏</option>
              {uniqueQueues.map(queue => (
                <option key={queue} value={queue}>{queue}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="divide-y divide-gray-200">
          {filteredAgents.map((agent) => (
            <div key={agent.id} className="p-4 hover:bg-gray-50">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="flex-shrink-0">
                    <div className={`w-3 h-3 rounded-full ${
                      agent.status === 'online' ? 'bg-green-500' :
                      agent.status === 'break' || agent.status === 'lunch' ? 'bg-yellow-500' :
                      agent.status === 'training' ? 'bg-blue-500' : 'bg-gray-500'
                    }`}></div>
                  </div>
                  
                  <div>
                    <div className="flex items-center space-x-3">
                      <h4 className="font-medium text-gray-900">{agent.name}</h4>
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getAgentStatusColor(agent.status)}`}>
                        {getAgentStatusText(agent.status)}
                      </span>
                      {agent.currentCall && (
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                          üìû –ù–∞ –∑–≤–æ–Ω–∫–µ
                        </span>
                      )}
                    </div>
                    <div className="flex items-center space-x-4 text-sm text-gray-500 mt-1">
                      <span>–û—á–µ—Ä–µ–¥—å: {agent.queue}</span>
                      <span>–í—Ö–æ–¥: {agent.loginTime}</span>
                      <span>–ó–≤–æ–Ω–∫–æ–≤: {agent.callsHandled}</span>
                      {agent.avgHandleTime > 0 && (
                        <span>AHT: {agent.avgHandleTime}—Å</span>
                      )}
                    </div>
                  </div>
                </div>

                <div className="text-right text-sm text-gray-500">
                  –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {Math.round((Date.now() - agent.lastActivity.getTime()) / (1000 * 60))}–º –Ω–∞–∑–∞–¥
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Real-time Status Bar - BDD: Live monitoring indicator */}
      <div className="bg-gray-50 rounded-lg p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2"></div>
              <span className="text-sm text-gray-600">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</span>
            </div>
            <div className="text-sm text-gray-500">
              –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            </div>
          </div>
          <div className="flex items-center space-x-4 text-sm text-gray-500">
            <span>üü¢ {metrics.filter(m => m.status === 'excellent').length} –û—Ç–ª–∏—á–Ω–æ</span>
            <span>üîµ {metrics.filter(m => m.status === 'good').length} –•–æ—Ä–æ—à–æ</span>
            <span>üü° {metrics.filter(m => m.status === 'warning').length} –í–Ω–∏–º–∞–Ω–∏–µ</span>
            <span>üî¥ {metrics.filter(m => m.status === 'critical').length} –ö—Ä–∏—Ç–∏—á–Ω–æ</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OperationalControlDashboard;