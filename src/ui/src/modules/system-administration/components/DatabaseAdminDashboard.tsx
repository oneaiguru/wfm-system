import React, { useState, useEffect } from 'react';

// BDD: Database administration dashboard - Adapted from ReportsDashboard
// Based on: 18-system-administration-configuration.feature

interface DatabaseMetric {
  id: string;
  name: string;
  value: number;
  target?: number;
  unit: string;
  status: 'excellent' | 'good' | 'warning' | 'critical';
  trend: 'up' | 'down' | 'stable';
  changePercent: number;
  lastUpdated: Date;
}

interface DatabaseMetricProps {
  metric: DatabaseMetric;
}

const DatabaseMetricCard: React.FC<DatabaseMetricProps> = ({ metric }) => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'excellent': return '#10b981';
      case 'good': return '#3b82f6';
      case 'warning': return '#f59e0b';
      case 'critical': return '#ef4444';
      default: return '#6b7280';
    }
  };

  const formatValue = (value: number, unit: string) => {
    if (unit === '%') return `${value.toFixed(1)}%`;
    if (unit === 'ms') return `${value.toFixed(0)}ms`;
    if (unit === 'MB') return `${value.toFixed(0)}MB`;
    if (unit === 'GB') return `${value.toFixed(1)}GB`;
    if (unit === 'connections') return value.toString();
    return value.toFixed(1);
  };

  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'up': return '‚Üó';
      case 'down': return '‚Üò';
      case 'stable': return '‚Üí';
      default: return '‚Üí';
    }
  };

  const getTrendColor = (trend: string) => {
    switch (trend) {
      case 'up': return 'text-green-600';
      case 'down': return 'text-red-600';
      case 'stable': return 'text-gray-600';
      default: return 'text-gray-600';
    }
  };

  const progressPercentage = metric.target ? Math.min((metric.value / metric.target) * 100, 100) : 0;

  return (
    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
      <div className="flex items-center justify-between">
        <div className="flex-1">
          <p className="text-sm font-medium text-gray-600">{metric.name}</p>
          <div className="mt-1 flex items-baseline">
            <p className="text-2xl font-semibold text-gray-900">
              {formatValue(metric.value, metric.unit)}
            </p>
            {metric.target && (
              <p className="ml-2 text-sm text-gray-500">
                / {formatValue(metric.target, metric.unit)}
              </p>
            )}
          </div>
        </div>
        
        <div className="flex flex-col items-end">
          <div 
            className="w-3 h-3 rounded-full mb-2"
            style={{ backgroundColor: getStatusColor(metric.status) }}
          ></div>
          <div className={`flex items-center ${getTrendColor(metric.trend)}`}>
            <span className="text-lg mr-1">{getTrendIcon(metric.trend)}</span>
            <span className="text-sm font-medium">
              {Math.abs(metric.changePercent).toFixed(1)}%
            </span>
          </div>
        </div>
      </div>
      
      {metric.target && (
        <div className="mt-4">
          <div className="flex items-center justify-between text-xs text-gray-500 mb-1">
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏</span>
            <span>{progressPercentage.toFixed(0)}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-1.5">
            <div 
              className="h-1.5 rounded-full transition-all duration-300"
              style={{ 
                width: `${progressPercentage}%`,
                backgroundColor: getStatusColor(metric.status)
              }}
            ></div>
          </div>
        </div>
      )}
      
      <div className="mt-3 text-xs text-gray-400">
        –û–±–Ω–æ–≤–ª–µ–Ω–æ: {metric.lastUpdated.toLocaleTimeString('ru-RU')}
      </div>
    </div>
  );
};

const DatabaseAdminDashboard: React.FC = () => {
  const [metrics, setMetrics] = useState<DatabaseMetric[]>([]);
  const [loading, setLoading] = useState(true);
  const [lastRefresh, setLastRefresh] = useState(new Date());

  // BDD: PostgreSQL configuration interface with monitoring
  useEffect(() => {
    const loadDatabaseMetrics = () => {
      const now = new Date();
      const mockMetrics: DatabaseMetric[] = [
        {
          id: '1',
          name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
          value: 47,
          target: 100,
          unit: 'connections',
          status: 'good',
          trend: 'stable',
          changePercent: 0.8,
          lastUpdated: now
        },
        {
          id: '2',
          name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU',
          value: 23.4,
          target: 80.0,
          unit: '%',
          status: 'excellent',
          trend: 'down',
          changePercent: -2.1,
          lastUpdated: now
        },
        {
          id: '3',
          name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
          value: 67.8,
          target: 85.0,
          unit: '%',
          status: 'good',
          trend: 'up',
          changePercent: 1.5,
          lastUpdated: now
        },
        {
          id: '4',
          name: '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤',
          value: 45,
          target: 100,
          unit: 'ms',
          status: 'excellent',
          trend: 'down',
          changePercent: -12.3,
          lastUpdated: now
        },
        {
          id: '5',
          name: '–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
          value: 2.3,
          unit: 'GB',
          status: 'good',
          trend: 'up',
          changePercent: 5.2,
          lastUpdated: now
        },
        {
          id: '6',
          name: '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è',
          value: 98.7,
          target: 95.0,
          unit: '%',
          status: 'excellent',
          trend: 'stable',
          changePercent: 0.3,
          lastUpdated: now
        }
      ];
      
      setMetrics(mockMetrics);
      setLoading(false);
      setLastRefresh(now);
    };

    loadDatabaseMetrics();
    
    // Real-time updates every 30 seconds
    const interval = setInterval(() => {
      loadDatabaseMetrics();
    }, 30000);

    return () => clearInterval(interval);
  }, []);

  const getOverallDatabaseStatus = () => {
    const excellentCount = metrics.filter(m => m.status === 'excellent').length;
    const goodCount = metrics.filter(m => m.status === 'good').length;
    const total = metrics.length;
    
    if (excellentCount >= total * 0.7) return { status: 'excellent', text: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ' };
    if ((excellentCount + goodCount) >= total * 0.8) return { status: 'good', text: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ' };
    return { status: 'warning', text: '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' };
  };

  const overallStatus = getOverallDatabaseStatus();

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'excellent': return '#10b981';
      case 'good': return '#3b82f6';
      case 'warning': return '#f59e0b';
      case 'critical': return '#ef4444';
      default: return '#6b7280';
    }
  };

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-300 rounded w-1/3 mb-4"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="h-32 bg-gray-300 rounded-lg"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header - BDD: Database administration monitoring */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h1>
            <p className="text-gray-500 flex items-center mt-1">
              <span className="text-xl mr-2">üóÑÔ∏è</span>
              PostgreSQL 15.4 - –û–û–û "–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å"
            </p>
          </div>
          
          <div className="text-right">
            <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${
              overallStatus.status === 'excellent' ? 'bg-green-100 text-green-800' :
              overallStatus.status === 'good' ? 'bg-blue-100 text-blue-800' :
              'bg-yellow-100 text-yellow-800'
            }`}>
              <div 
                className="w-2 h-2 rounded-full mr-2"
                style={{ backgroundColor: getStatusColor(overallStatus.status) }}
              ></div>
              {overallStatus.text}
            </div>
            <p className="text-sm text-gray-500 mt-1">
              –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            </p>
            <p className="text-xs text-gray-400 mt-1">
              –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {lastRefresh.toLocaleTimeString('ru-RU')}
            </p>
          </div>
        </div>
      </div>

      {/* Database Metrics Grid - BDD: Performance monitoring */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {metrics.map((metric) => (
          <DatabaseMetricCard key={metric.id} metric={metric} />
        ))}
      </div>

      {/* Quick Insights - BDD: Health monitoring */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-gray-900 mb-2 flex items-center">
              <span className="text-lg mr-2">‚úÖ</span>
              –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            </h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ</li>
              <li>‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ</li>
              <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã</li>
              <li>‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω—ã</li>
            </ul>
          </div>
          <div>
            <h4 className="font-medium text-gray-900 mb-2 flex items-center">
              <span className="text-lg mr-2">‚ö†Ô∏è</span>
              –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è
            </h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ä–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</li>
              <li>‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è</li>
              <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π</li>
              <li>‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Database Connection Info - BDD: Connection monitoring */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏</h3>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600">–•–æ—Å—Ç:</span>
              <span className="font-medium">localhost:5432</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</span>
              <span className="font-medium">wfm_technoservice</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
              <span className="font-medium">wfm_admin</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–ú–∞–∫—Å. –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:</span>
              <span className="font-medium">100</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–í–µ—Ä—Å–∏—è:</span>
              <span className="font-medium">PostgreSQL 15.4</span>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</h3>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span className="text-gray-600">–î–∞—Ç–∞:</span>
              <span className="font-medium">15.07.2024 03:00</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–†–∞–∑–º–µ—Ä:</span>
              <span className="font-medium">1.8 GB</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–°—Ç–∞—Ç—É—Å:</span>
              <span className="text-green-600 font-medium">‚úì –£—Å–ø–µ—à–Ω–æ</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
              <span className="font-medium">12 –º–∏–Ω 34 —Å–µ–∫</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-600">–°–ª–µ–¥—É—é—â–µ–µ:</span>
              <span className="font-medium">16.07.2024 03:00</span>
            </div>
          </div>
        </div>
      </div>

      {/* Real-time Status Bar - BDD: Live monitoring */}
      <div className="bg-gray-50 rounded-lg p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <div className="flex items-center">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse mr-2"></div>
              <span className="text-sm text-gray-600">–î–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</span>
            </div>
            <div className="text-sm text-gray-500">
              –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            </div>
          </div>
          <div className="flex items-center space-x-4 text-sm text-gray-500">
            <span>üü¢ {metrics.filter(m => m.status === 'excellent').length} –û—Ç–ª–∏—á–Ω–æ</span>
            <span>üîµ {metrics.filter(m => m.status === 'good').length} –•–æ—Ä–æ—à–æ</span>
            <span>üü° {metrics.filter(m => m.status === 'warning').length} –í–Ω–∏–º–∞–Ω–∏–µ</span>
            <span>üî¥ {metrics.filter(m => m.status === 'critical').length} –ö—Ä–∏—Ç–∏—á–Ω–æ</span>
          </div>
        </div>
      </div>

      {/* Admin Actions - BDD: Database administration interface */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-4">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button className="flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            <span className="mr-2">üíæ</span>
            –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
          </button>
          <button className="flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
            <span className="mr-2">üîß</span>
            –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã
          </button>
          <button className="flex items-center justify-center px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors">
            <span className="mr-2">üìä</span>
            –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          </button>
        </div>
      </div>
    </div>
  );
};

export default DatabaseAdminDashboard;