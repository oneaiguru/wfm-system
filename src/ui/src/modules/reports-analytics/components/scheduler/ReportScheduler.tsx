import React, { useState, useEffect } from 'react';
import realReportsService, { ScheduledReport, CreateScheduledReportRequest, ExportJob } from '../../../../services/realReportsService';

export interface ReportSchedulerProps {
  onScheduleCreated?: (schedule: ScheduledReport) => void;
}

const ReportScheduler: React.FC<ReportSchedulerProps> = ({ onScheduleCreated }) => {
  const [scheduledReports, setScheduledReports] = useState<ScheduledReport[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState<string>('');
  const [apiHealthy, setApiHealthy] = useState(false);
  const [showNewScheduleForm, setShowNewScheduleForm] = useState(false);
  const [editingSchedule, setEditingSchedule] = useState<ScheduledReport | null>(null);

  // New schedule form state
  const [scheduleForm, setScheduleForm] = useState<CreateScheduledReportRequest>({
    name: '',
    description: '',
    report_type: 'schedule-adherence',\n    format: 'excel',\n    schedule_pattern: 'weekly',\n    schedule_time: '09:00',\n    schedule_day: 1,\n    parameters: {\n      period_start: '',\n      period_end: '',\n      department: 'Technical Support'\n    },\n    email_recipients: []\n  });\n\n  const [emailInput, setEmailInput] = useState<string>('');\n\n  useEffect(() => {\n    loadScheduledReports();\n    checkApiHealth();\n  }, []);\n\n  const checkApiHealth = async () => {\n    try {\n      const isHealthy = await realReportsService.checkApiHealth();\n      setApiHealthy(isHealthy);\n      if (!isHealthy) {\n        setApiError('Scheduler API is not available. Please check the backend service.');\n      }\n    } catch (error) {\n      setApiHealthy(false);\n      setApiError('Failed to connect to Scheduler API');\n    }\n  };\n\n  const loadScheduledReports = async () => {\n    setIsLoading(true);\n    try {\n      const result = await realReportsService.getScheduledReports();\n      \n      if (result.success && result.data) {\n        setScheduledReports(result.data);\n        setApiError(''); // Clear any previous errors\n        console.log('[REPORT SCHEDULER] Loaded scheduled reports:', result.data);\n      } else {\n        setApiError(result.error || 'Failed to load scheduled reports');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      setApiError(errorMessage);\n      console.error('[REPORT SCHEDULER] Error loading scheduled reports:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const createScheduledReport = async () => {\n    setIsLoading(true);\n    setApiError('');\n\n    try {\n      // Check API health first\n      if (!apiHealthy) {\n        const isHealthy = await realReportsService.checkApiHealth();\n        if (!isHealthy) {\n          throw new Error('Scheduler API server is not available. Please try again later.');\n        }\n        setApiHealthy(true);\n      }\n\n      console.log('[REPORT SCHEDULER] Creating scheduled report:', scheduleForm);\n\n      const result = await realReportsService.createScheduledReport(scheduleForm);\n\n      if (result.success && result.data) {\n        console.log('[REPORT SCHEDULER] Scheduled report created:', result.data);\n        \n        // Add new schedule to the list\n        setScheduledReports(prev => [result.data!, ...prev]);\n        \n        // Reset form and hide it\n        resetForm();\n\n        if (onScheduleCreated) {\n          onScheduleCreated(result.data);\n        }\n      } else {\n        setApiError(result.error || 'Failed to create scheduled report');\n      }\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      setApiError(errorMessage);\n      console.error('[REPORT SCHEDULER] Error creating scheduled report:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateScheduledReport = async () => {\n    if (!editingSchedule) return;\n\n    setIsLoading(true);\n    setApiError('');\n\n    try {\n      const result = await realReportsService.updateScheduledReport(editingSchedule.schedule_id, scheduleForm);\n\n      if (result.success && result.data) {\n        console.log('[REPORT SCHEDULER] Scheduled report updated:', result.data);\n        \n        // Update the schedule in the list\n        setScheduledReports(prev => prev.map(schedule => \n          schedule.schedule_id === editingSchedule.schedule_id ? result.data! : schedule\n        ));\n        \n        // Reset form and hide it\n        resetForm();\n      } else {\n        setApiError(result.error || 'Failed to update scheduled report');\n      }\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      setApiError(errorMessage);\n      console.error('[REPORT SCHEDULER] Error updating scheduled report:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const deleteScheduledReport = async (scheduleId: string) => {\n    if (!confirm('Are you sure you want to delete this scheduled report?')) {\n      return;\n    }\n\n    try {\n      const result = await realReportsService.deleteScheduledReport(scheduleId);\n      \n      if (result.success) {\n        // Remove from list\n        setScheduledReports(prev => prev.filter(schedule => schedule.schedule_id !== scheduleId));\n      } else {\n        setApiError(result.error || 'Failed to delete scheduled report');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Delete failed';\n      setApiError(errorMessage);\n    }\n  };\n\n  const toggleScheduleActive = async (schedule: ScheduledReport) => {\n    try {\n      const result = await realReportsService.toggleScheduledReport(schedule.schedule_id, !schedule.is_active);\n      \n      if (result.success && result.data) {\n        // Update the schedule in the list\n        setScheduledReports(prev => prev.map(s => \n          s.schedule_id === schedule.schedule_id ? result.data! : s\n        ));\n      } else {\n        setApiError(result.error || 'Failed to toggle schedule');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Toggle failed';\n      setApiError(errorMessage);\n    }\n  };\n\n  const runScheduleNow = async (schedule: ScheduledReport) => {\n    try {\n      const result = await realReportsService.runScheduledReportNow(schedule.schedule_id);\n      \n      if (result.success && result.data) {\n        alert(`Report \"${schedule.name}\" has been queued for immediate execution.`);\n      } else {\n        setApiError(result.error || 'Failed to run scheduled report');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Run failed';\n      setApiError(errorMessage);\n    }\n  };\n\n  const editSchedule = (schedule: ScheduledReport) => {\n    setEditingSchedule(schedule);\n    setScheduleForm({\n      name: schedule.name,\n      description: schedule.description || '',\n      report_type: schedule.report_type,\n      format: schedule.format,\n      schedule_pattern: schedule.schedule_pattern,\n      schedule_time: schedule.schedule_time,\n      schedule_day: schedule.schedule_day,\n      parameters: schedule.parameters,\n      email_recipients: [...schedule.email_recipients]\n    });\n    setShowNewScheduleForm(true);\n  };\n\n  const resetForm = () => {\n    setShowNewScheduleForm(false);\n    setEditingSchedule(null);\n    setScheduleForm({\n      name: '',\n      description: '',\n      report_type: 'schedule-adherence',\n      format: 'excel',\n      schedule_pattern: 'weekly',\n      schedule_time: '09:00',\n      schedule_day: 1,\n      parameters: {\n        period_start: '',\n        period_end: '',\n        department: 'Technical Support'\n      },\n      email_recipients: []\n    });\n    setEmailInput('');\n  };\n\n  const addEmailRecipient = () => {\n    if (emailInput && emailInput.includes('@') && !scheduleForm.email_recipients.includes(emailInput)) {\n      setScheduleForm(prev => ({\n        ...prev,\n        email_recipients: [...prev.email_recipients, emailInput]\n      }));\n      setEmailInput('');\n    }\n  };\n\n  const removeEmailRecipient = (email: string) => {\n    setScheduleForm(prev => ({\n      ...prev,\n      email_recipients: prev.email_recipients.filter(e => e !== email)\n    }));\n  };\n\n  const getScheduleDescription = (schedule: ScheduledReport) => {\n    const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    \n    switch (schedule.schedule_pattern) {\n      case 'daily':\n        return `Daily at ${schedule.schedule_time}`;\n      case 'weekly':\n        const dayName = schedule.schedule_day !== undefined ? dayNames[schedule.schedule_day] : 'Monday';\n        return `Weekly on ${dayName} at ${schedule.schedule_time}`;\n      case 'monthly':\n        return `Monthly on day ${schedule.schedule_day || 1} at ${schedule.schedule_time}`;\n      case 'quarterly':\n        return `Quarterly on day ${schedule.schedule_day || 1} at ${schedule.schedule_time}`;\n      default:\n        return 'Unknown schedule';\n    }\n  };\n\n  const renderScheduleForm = () => {\n    if (!showNewScheduleForm) return null;\n\n    return (\n      <div className=\"bg-white border border-gray-200 rounded-lg p-6 mb-6\">\n        <h3 className=\"text-lg font-medium text-gray-900 mb-4\">\n          {editingSchedule ? 'Edit Scheduled Report' : 'Create New Scheduled Report'}\n        </h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {/* Name */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Report Name\n            </label>\n            <input\n              type=\"text\"\n              placeholder=\"Weekly Adherence Report\"\n              value={scheduleForm.name}\n              onChange={(e) => setScheduleForm(prev => ({ ...prev, name: e.target.value }))}\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          {/* Report Type */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Report Type\n            </label>\n            <select\n              value={scheduleForm.report_type}\n              onChange={(e) => setScheduleForm(prev => ({ ...prev, report_type: e.target.value as any }))}\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"schedule-adherence\">Schedule Adherence Report</option>\n              <option value=\"forecast-accuracy\">Forecast Accuracy Analysis</option>\n              <option value=\"payroll\">Payroll Report</option>\n              <option value=\"kpi-dashboard\">KPI Dashboard</option>\n            </select>\n          </div>\n\n          {/* Format */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Export Format\n            </label>\n            <select\n              value={scheduleForm.format}\n              onChange={(e) => setScheduleForm(prev => ({ ...prev, format: e.target.value as any }))}\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"excel\">Excel (.xlsx)</option>\n              <option value=\"pdf\">PDF (.pdf)</option>\n              <option value=\"csv\">CSV (.csv)</option>\n            </select>\n          </div>\n\n          {/* Schedule Pattern */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Schedule Pattern\n            </label>\n            <select\n              value={scheduleForm.schedule_pattern}\n              onChange={(e) => setScheduleForm(prev => ({ ...prev, schedule_pattern: e.target.value as any }))}\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"daily\">Daily</option>\n              <option value=\"weekly\">Weekly</option>\n              <option value=\"monthly\">Monthly</option>\n              <option value=\"quarterly\">Quarterly</option>\n            </select>\n          </div>\n\n          {/* Schedule Time */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Time\n            </label>\n            <input\n              type=\"time\"\n              value={scheduleForm.schedule_time}\n              onChange={(e) => setScheduleForm(prev => ({ ...prev, schedule_time: e.target.value }))}\n              className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          {/* Schedule Day (for weekly/monthly) */}\n          {(scheduleForm.schedule_pattern === 'weekly' || scheduleForm.schedule_pattern === 'monthly' || scheduleForm.schedule_pattern === 'quarterly') && (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                {scheduleForm.schedule_pattern === 'weekly' ? 'Day of Week' : 'Day of Month'}\n              </label>\n              {scheduleForm.schedule_pattern === 'weekly' ? (\n                <select\n                  value={scheduleForm.schedule_day || 1}\n                  onChange={(e) => setScheduleForm(prev => ({ ...prev, schedule_day: parseInt(e.target.value) }))}\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value={0}>Sunday</option>\n                  <option value={1}>Monday</option>\n                  <option value={2}>Tuesday</option>\n                  <option value={3}>Wednesday</option>\n                  <option value={4}>Thursday</option>\n                  <option value={5}>Friday</option>\n                  <option value={6}>Saturday</option>\n                </select>\n              ) : (\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"31\"\n                  value={scheduleForm.schedule_day || 1}\n                  onChange={(e) => setScheduleForm(prev => ({ ...prev, schedule_day: parseInt(e.target.value) }))}\n                  className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Description */}\n        <div className=\"mt-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Description (Optional)\n          </label>\n          <textarea\n            placeholder=\"Describe what this scheduled report is for...\"\n            value={scheduleForm.description}\n            onChange={(e) => setScheduleForm(prev => ({ ...prev, description: e.target.value }))}\n            rows={3}\n            className=\"w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n\n        {/* Email Recipients */}\n        <div className=\"mt-4\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Email Recipients\n          </label>\n          <div className=\"flex space-x-2 mb-2\">\n            <input\n              type=\"email\"\n              placeholder=\"user@company.com\"\n              value={emailInput}\n              onChange={(e) => setEmailInput(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && addEmailRecipient()}\n              className=\"flex-1 border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <button\n              onClick={addEmailRecipient}\n              type=\"button\"\n              className=\"px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n            >\n              Add\n            </button>\n          </div>\n          \n          {scheduleForm.email_recipients.length > 0 && (\n            <div className=\"flex flex-wrap gap-2\">\n              {scheduleForm.email_recipients.map((email, index) => (\n                <span key={index} className=\"inline-flex items-center px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded\">\n                  {email}\n                  <button\n                    onClick={() => removeEmailRecipient(email)}\n                    className=\"ml-1 text-blue-600 hover:text-blue-800\"\n                    type=\"button\"\n                  >\n                    ×\n                  </button>\n                </span>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Actions */}\n        <div className=\"mt-6 flex justify-end space-x-3\">\n          <button\n            onClick={resetForm}\n            type=\"button\"\n            className=\"px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={editingSchedule ? updateScheduledReport : createScheduledReport}\n            disabled={isLoading || !apiHealthy || !scheduleForm.name.trim() || scheduleForm.email_recipients.length === 0}\n            type=\"button\"\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center\"\n          >\n            {isLoading ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                {editingSchedule ? 'Updating...' : 'Creating...'}\n              </>\n            ) : (\n              editingSchedule ? 'Update Schedule' : 'Create Schedule'\n            )}\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n        {/* Header */}\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Report Scheduler</h1>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                Automate report generation and delivery with real backend scheduling\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-2 h-2 rounded-full ${apiHealthy ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                <span className=\"text-sm text-gray-600\">\n                  Scheduler API {apiHealthy ? 'Connected' : 'Offline'}\n                </span>\n              </div>\n              <button\n                onClick={() => setShowNewScheduleForm(true)}\n                disabled={!apiHealthy}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              >\n                New Schedule\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* API Error Display */}\n        {apiError && (\n          <div className=\"mx-6 mt-4 px-6 py-3 bg-red-50 border border-red-200 rounded-lg\">\n            <div className=\"flex items-center gap-2 text-red-800\">\n              <span className=\"text-red-500\">❌</span>\n              <div>\n                <div className=\"font-medium\">Scheduler Operation Failed</div>\n                <div className=\"text-sm\">{apiError}</div>\n              </div>\n              <button\n                onClick={checkApiHealth}\n                className=\"ml-auto px-3 py-1 bg-red-100 hover:bg-red-200 text-red-700 text-sm rounded transition-colors\"\n              >\n                Retry\n              </button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"p-6\">\n          {/* Schedule Form */}\n          {renderScheduleForm()}\n\n          {/* Scheduled Reports List */}\n          <div>\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-medium text-gray-900\">Scheduled Reports</h2>\n              <button\n                onClick={loadScheduledReports}\n                className=\"text-sm text-blue-600 hover:text-blue-700\"\n              >\n                Refresh\n              </button>\n            </div>\n\n            {isLoading && scheduledReports.length === 0 ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n                <span className=\"ml-2 text-gray-600\">Loading scheduled reports...</span>\n              </div>\n            ) : scheduledReports.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                <div className=\"text-4xl mb-2\">📅</div>\n                <div>No scheduled reports found</div>\n                <div className=\"text-sm\">Create your first scheduled report to get started</div>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {scheduledReports.map((schedule) => (\n                  <div key={schedule.schedule_id} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3\">\n                          <span className=\"text-lg\">{schedule.is_active ? '🟢' : '🔴'}</span>\n                          <div>\n                            <div className=\"font-medium text-gray-900\">{schedule.name}</div>\n                            <div className=\"text-sm text-gray-500\">\n                              {schedule.report_type.replace('-', ' ').replace(/\\b\\w/g, l => l.toUpperCase())} • \n                              {schedule.format.toUpperCase()} • \n                              {getScheduleDescription(schedule)}\n                            </div>\n                            {schedule.description && (\n                              <div className=\"text-sm text-gray-600 mt-1\">{schedule.description}</div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"mt-2 text-xs text-gray-500\">\n                          <span>Recipients: {schedule.email_recipients.join(', ')}</span>\n                          {schedule.last_run && (\n                            <> • Last run: {new Date(schedule.last_run).toLocaleString()}</>\n                          )}\n                          {schedule.next_run && (\n                            <> • Next run: {new Date(schedule.next_run).toLocaleString()}</>\n                          )}\n                        </div>\n                        \n                        <div className=\"mt-1 text-xs text-gray-500\">\n                          Runs: {schedule.run_count} • Failures: {schedule.failure_count}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => toggleScheduleActive(schedule)}\n                          className={`px-3 py-1 text-sm rounded transition-colors ${\n                            schedule.is_active \n                              ? 'bg-red-100 text-red-700 hover:bg-red-200' \n                              : 'bg-green-100 text-green-700 hover:bg-green-200'\n                          }`}\n                        >\n                          {schedule.is_active ? 'Pause' : 'Activate'}\n                        </button>\n                        \n                        <button\n                          onClick={() => runScheduleNow(schedule)}\n                          className=\"px-3 py-1 bg-blue-100 text-blue-700 text-sm rounded hover:bg-blue-200 transition-colors\"\n                        >\n                          Run Now\n                        </button>\n                        \n                        <button\n                          onClick={() => editSchedule(schedule)}\n                          className=\"px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded hover:bg-gray-200 transition-colors\"\n                        >\n                          Edit\n                        </button>\n                        \n                        <button\n                          onClick={() => deleteScheduledReport(schedule.schedule_id)}\n                          className=\"px-3 py-1 bg-red-100 text-red-700 text-sm rounded hover:bg-red-200 transition-colors\"\n                        >\n                          Delete\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReportScheduler;