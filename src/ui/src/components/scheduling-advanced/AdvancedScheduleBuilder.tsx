import React, { useState, useEffect } from 'react';

interface ScheduleConfig {
  id: string;
  name: string;
  period: { start: string; end: string };
  constraints: Constraint[];
  patterns: ShiftPattern[];
  employees: Employee[];
}

interface Constraint {
  id: string;
  type: 'skill_requirement' | 'max_hours' | 'rest_period' | 'availability';
  rule: string;
  value: any;
}

interface ShiftPattern {
  id: string;
  name: string;
  startTime: string;
  endTime: string;
  duration: number;
  skillRequirements: string[];
}

interface Employee {
  id: string;
  name: string;
  skills: string[];
  availability: any;
  maxHours: number;
}

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8001/api/v1';

const AdvancedScheduleBuilder: React.FC = () => {
  const [scheduleConfig, setScheduleConfig] = useState<ScheduleConfig>({
    id: '',
    name: '',
    period: { start: '', end: '' },
    constraints: [],
    patterns: [],
    employees: []
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [buildStatus, setBuildStatus] = useState<'idle' | 'building' | 'completed' | 'error'>('idle');

  const buildSchedule = async () => {
    try {
      setLoading(true);
      setBuildStatus('building');
      const response = await fetch(`${API_BASE_URL}/scheduling/advanced/build`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(scheduleConfig),
      });
      
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      
      const result = await response.json();
      setBuildStatus('completed');
      setError(null);
      
      // Show success message with schedule details
      alert(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! 
      –°–º–µ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${result.totalShifts}
      –ü–æ–∫—Ä—ã—Ç–∏–µ: ${result.coverage}%
      –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ${result.optimizationScore}%`);
      
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      setBuildStatus('error');
    } finally {
      setLoading(false);
    }
  };

  const addConstraint = () => {
    const newConstraint: Constraint = {
      id: Date.now().toString(),
      type: 'skill_requirement',
      rule: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞',
      value: ''
    };
    setScheduleConfig(prev => ({
      ...prev,
      constraints: [...prev.constraints, newConstraint]
    }));
  };

  const updateConstraint = (constraintId: string, field: string, value: any) => {
    setScheduleConfig(prev => ({
      ...prev,
      constraints: prev.constraints.map(constraint =>
        constraint.id === constraintId ? { ...constraint, [field]: value } : constraint
      )
    }));
  };

  const removeConstraint = (constraintId: string) => {
    setScheduleConfig(prev => ({
      ...prev,
      constraints: prev.constraints.filter(c => c.id !== constraintId)
    }));
  };

  const addShiftPattern = () => {
    const newPattern: ShiftPattern = {
      id: Date.now().toString(),
      name: '–ù–æ–≤–∞—è —Å–º–µ–Ω–∞',
      startTime: '09:00',
      endTime: '17:00',
      duration: 8,
      skillRequirements: []
    };
    setScheduleConfig(prev => ({
      ...prev,
      patterns: [...prev.patterns, newPattern]
    }));
  };

  return (
    <div className="advanced-schedule-builder">
      <div className="builder-header">
        <h1>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π</h1>
        <div className="header-actions">
          <button 
            className="build-btn"
            onClick={buildSchedule}
            disabled={loading || !scheduleConfig.name}
          >
            {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'}
          </button>
        </div>
      </div>

      {error && (
        <div className="error-message">
          <span className="error-icon">‚ö†Ô∏è</span>
          {error}
          <button onClick={() => setError(null)}>‚úï</button>
        </div>
      )}

      <div className="builder-status">
        <div className={`status-indicator ${buildStatus}`}>
          {buildStatus === 'idle' && '‚è≥ –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é'}
          {buildStatus === 'building' && 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...'}
          {buildStatus === 'completed' && '‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ'}
          {buildStatus === 'error' && '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è'}
        </div>
      </div>

      <div className="builder-content">
        <div className="config-section">
          <h2>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h2>
          <div className="form-grid">
            <div className="form-group">
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</label>
              <input
                type="text"
                value={scheduleConfig.name}
                onChange={(e) => setScheduleConfig(prev => ({ ...prev, name: e.target.value }))}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
              />
            </div>
            <div className="form-group">
              <label>–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞</label>
              <input
                type="date"
                value={scheduleConfig.period.start}
                onChange={(e) => setScheduleConfig(prev => ({
                  ...prev,
                  period: { ...prev.period, start: e.target.value }
                }))}
              />
            </div>
            <div className="form-group">
              <label>–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞</label>
              <input
                type="date"
                value={scheduleConfig.period.end}
                onChange={(e) => setScheduleConfig(prev => ({
                  ...prev,
                  period: { ...prev.period, end: e.target.value }
                }))}
              />
            </div>
          </div>
        </div>

        <div className="constraints-section">
          <div className="section-header">
            <h2>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞</h2>
            <button className="add-constraint-btn" onClick={addConstraint}>
              + –î–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            </button>
          </div>
          <div className="constraints-list">
            {scheduleConfig.constraints.map(constraint => (
              <div key={constraint.id} className="constraint-card">
                <div className="constraint-header">
                  <select
                    value={constraint.type}
                    onChange={(e) => updateConstraint(constraint.id, 'type', e.target.value)}
                  >
                    <option value="skill_requirement">–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞</option>
                    <option value="max_hours">–ú–∞–∫—Å–∏–º—É–º —á–∞—Å–æ–≤</option>
                    <option value="rest_period">–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞</option>
                    <option value="availability">–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</option>
                  </select>
                  <button 
                    className="remove-constraint"
                    onClick={() => removeConstraint(constraint.id)}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
                <div className="constraint-details">
                  <input
                    type="text"
                    value={constraint.rule}
                    onChange={(e) => updateConstraint(constraint.id, 'rule', e.target.value)}
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"
                  />
                  <input
                    type="text"
                    value={constraint.value}
                    onChange={(e) => updateConstraint(constraint.id, 'value', e.target.value)}
                    placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ"
                  />
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="patterns-section">
          <div className="section-header">
            <h2>–®–∞–±–ª–æ–Ω—ã —Å–º–µ–Ω</h2>
            <button className="add-pattern-btn" onClick={addShiftPattern}>
              + –î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω —Å–º–µ–Ω—ã
            </button>
          </div>
          <div className="patterns-grid">
            {scheduleConfig.patterns.map(pattern => (
              <div key={pattern.id} className="pattern-card">
                <h3>{pattern.name}</h3>
                <div className="pattern-time">
                  {pattern.startTime} - {pattern.endTime} ({pattern.duration}—á)
                </div>
                <div className="pattern-skills">
                  –ù–∞–≤—ã–∫–∏: {pattern.skillRequirements.join(', ') || '–õ—é–±—ã–µ'}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="optimization-section">
          <h2>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</h2>
          <div className="optimization-grid">
            <div className="optimization-option">
              <label className="checkbox-label">
                <input type="checkbox" />
                –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ
              </label>
            </div>
            <div className="optimization-option">
              <label className="checkbox-label">
                <input type="checkbox" />
                –ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ
              </label>
            </div>
            <div className="optimization-option">
              <label className="checkbox-label">
                <input type="checkbox" />
                –£—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
              </label>
            </div>
            <div className="optimization-option">
              <label className="checkbox-label">
                <input type="checkbox" />
                –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdvancedScheduleBuilder;