/**
 * Real-Time Monitoring & Operational Control Dashboard
 * SPEC-15: Comprehensive operations control center with WebSocket integration
 * Adapted from RealTimeDashboard.tsx with SPEC-15 specific requirements
 */

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { 
  Activity, Users, Phone, Clock, AlertTriangle, CheckCircle, XCircle,
  RefreshCw, Wifi, WifiOff, Server, Database, Cpu, MemoryStick,
  Monitor, Shield, Zap, TrendingUp, TrendingDown, BarChart3,
  Settings, Maximize2, Bell, Eye, Pause, Play, RotateCcw
} from 'lucide-react';

// Real-time WebSocket integration
import { TypedWebSocketClient, WebSocketEventType } from '../../websocket-client';
import type { 
  AgentStatusEventPayload, 
  QueueMetricsEventPayload, 
  SLAAlertEventPayload 
} from '../../websocket-client';

// Real services (no mocks)
import realRealtimeService from '../../services/realRealtimeService';

interface StaffCoverageData {
  department: string;
  required: number;
  present: number;
  coverage: number;
  status: 'ok' | 'warning' | 'critical';
}

interface CallQueueData {
  queue_id: string;
  calls_waiting: number;
  avg_queue_time: number;
  threshold: number;
  status: 'ok' | 'warning' | 'critical';
  suggested_action?: string;
}

interface EmployeeAttendanceData {
  employee_id: string;
  employee_name: string;
  status: 'clocked_in' | 'clocked_out' | 'break' | 'late';
  time: string;
  location: string;
  duration?: string;
}

interface SystemPerformanceData {
  component: string;
  metric: string;
  value: number;
  threshold: number;
  status: 'ok' | 'warning' | 'critical';
  unit: string;
}

interface RealTimeMonitorData {
  staff_coverage: StaffCoverageData[];
  call_queues: CallQueueData[];
  employee_attendance: EmployeeAttendanceData[];
  system_performance: SystemPerformanceData[];
  active_alerts: {
    id: string;
    type: string;
    message: string;
    severity: 'info' | 'warning' | 'critical';
    timestamp: string;
  }[];
  last_updated: string;
}

const russianMonitoringTranslations = {
  title: 'Мониторинг в Реальном Времени',
  subtitle: 'Операционный контроль и мониторинг системы',
  sections: {
    staff_coverage: 'Покрытие Персонала',
    call_queues: 'Очереди Звонков',
    attendance: 'Посещаемость',
    system_health: 'Здоровье Системы',
    alerts: 'Активные Уведомления'
  },
  status: {
    ok: 'В норме',
    warning: 'Предупреждение',
    critical: 'Критическое',
    connected: 'Подключено',
    disconnected: 'Отключено',
    clocked_in: 'Пришел',
    clocked_out: 'Ушел',
    break: 'Перерыв',
    late: 'Опоздание'
  },
  metrics: {
    required: 'Требуется',
    present: 'Присутствует',
    coverage: 'Покрытие',
    calls_waiting: 'Звонков в очереди',
    avg_queue_time: 'Среднее время ожидания',
    response_time: 'Время отклика',
    cpu_usage: 'Использование CPU',
    memory_usage: 'Использование памяти',
    last_updated: 'Последнее обновление'
  },
  actions: {
    refresh: 'Обновить',
    pause_monitoring: 'Приостановить мониторинг',
    resume_monitoring: 'Возобновить мониторинг',
    acknowledge_alert: 'Подтвердить уведомление',
    view_details: 'Посмотреть детали',
    export_data: 'Экспорт данных'
  }
};\n\nconst RealTimeMonitor: React.FC = () => {\n  const [monitorData, setMonitorData] = useState<RealTimeMonitorData | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isMonitoring, setIsMonitoring] = useState(true);\n  const [connectionLost, setConnectionLost] = useState(false);\n  const [lastUpdateTime, setLastUpdateTime] = useState<string>('');\n  const [apiHealthy, setApiHealthy] = useState(false);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  \n  const wsClient = useRef<TypedWebSocketClient | null>(null);\n  const refreshInterval = useRef<NodeJS.Timeout | null>(null);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    initializeWebSocket();\n    checkApiHealth();\n    loadInitialData();\n\n    return () => {\n      cleanup();\n    };\n  }, []);\n\n  const initializeWebSocket = useCallback(() => {\n    try {\n      wsClient.current = new TypedWebSocketClient();\n      \n      // Connection events\n      wsClient.current.onConnect(() => {\n        setIsConnected(true);\n        setConnectionLost(false);\n        console.log('[REAL-TIME MONITOR] WebSocket connected');\n      });\n\n      wsClient.current.onDisconnect(() => {\n        setIsConnected(false);\n        setConnectionLost(true);\n        console.log('[REAL-TIME MONITOR] WebSocket disconnected');\n      });\n\n      // Real-time event subscriptions\n      wsClient.current.onAgentStatusChanged((payload: AgentStatusEventPayload) => {\n        updateAttendanceData(payload);\n      });\n\n      wsClient.current.onQueueMetricsUpdate((payload: QueueMetricsEventPayload) => {\n        updateQueueData(payload);\n      });\n\n      wsClient.current.onSLAAlert((payload: SLAAlertEventPayload) => {\n        addNewAlert(payload);\n      });\n\n      // Start connection\n      wsClient.current.connect();\n      \n    } catch (error) {\n      console.error('[REAL-TIME MONITOR] WebSocket initialization failed:', error);\n      setConnectionLost(true);\n    }\n  }, []);\n\n  const cleanup = useCallback(() => {\n    if (wsClient.current) {\n      wsClient.current.disconnect();\n      wsClient.current = null;\n    }\n    if (refreshInterval.current) {\n      clearInterval(refreshInterval.current);\n      refreshInterval.current = null;\n    }\n  }, []);\n\n  const checkApiHealth = async () => {\n    try {\n      const isHealthy = await realRealtimeService.checkApiHealth();\n      setApiHealthy(isHealthy);\n    } catch (error) {\n      setApiHealthy(false);\n      console.error('[REAL-TIME MONITOR] API health check failed:', error);\n    }\n  };\n\n  const loadInitialData = async () => {\n    try {\n      // Load demo real-time monitoring data\n      const demoData: RealTimeMonitorData = {\n        staff_coverage: [\n          {\n            department: 'Customer Care',\n            required: 25,\n            present: 23,\n            coverage: 92,\n            status: 'warning'\n          },\n          {\n            department: 'Technical Support',\n            required: 15,\n            present: 15,\n            coverage: 100,\n            status: 'ok'\n          },\n          {\n            department: 'Sales',\n            required: 10,\n            present: 12,\n            coverage: 120,\n            status: 'ok'\n          }\n        ],\n        call_queues: [\n          {\n            queue_id: 'support_queue',\n            calls_waiting: 18,\n            avg_queue_time: 165, // seconds\n            threshold: 120,\n            status: 'critical',\n            suggested_action: 'Добавить больше агентов в очередь'\n          },\n          {\n            queue_id: 'sales_queue',\n            calls_waiting: 3,\n            avg_queue_time: 45,\n            threshold: 120,\n            status: 'ok'\n          }\n        ],\n        employee_attendance: [\n          {\n            employee_id: '1',\n            employee_name: 'Иван Петров',\n            status: 'clocked_in',\n            time: '09:02',\n            location: 'Офис-Главный',\n            duration: '2 мин опоздание'\n          },\n          {\n            employee_id: '2',\n            employee_name: 'Мария Сидорова',\n            status: 'break',\n            time: '14:15',\n            location: 'Офис-Главный',\n            duration: '15 мин'\n          },\n          {\n            employee_id: '3',\n            employee_name: 'Алексей Козлов',\n            status: 'clocked_in',\n            time: '09:00',\n            location: 'Удаленно'\n          }\n        ],\n        system_performance: [\n          {\n            component: 'Database',\n            metric: 'Response Time',\n            value: 750,\n            threshold: 500,\n            status: 'warning',\n            unit: 'ms'\n          },\n          {\n            component: 'API Server',\n            metric: 'CPU Usage',\n            value: 85,\n            threshold: 80,\n            status: 'critical',\n            unit: '%'\n          },\n          {\n            component: 'Memory',\n            metric: 'RAM Usage',\n            value: 70,\n            threshold: 75,\n            status: 'ok',\n            unit: '%'\n          }\n        ],\n        active_alerts: [\n          {\n            id: '1',\n            type: 'Queue Alert',\n            message: 'Время ожидания в очереди превышает пороговое значение',\n            severity: 'critical',\n            timestamp: new Date().toISOString()\n          },\n          {\n            id: '2',\n            type: 'Performance Alert',\n            message: 'Высокое использование CPU на API сервере',\n            severity: 'warning',\n            timestamp: new Date().toISOString()\n          }\n        ],\n        last_updated: new Date().toISOString()\n      };\n      \n      setMonitorData(demoData);\n      setLastUpdateTime(new Date().toLocaleString('ru-RU'));\n      \n    } catch (error) {\n      console.error('[REAL-TIME MONITOR] Failed to load initial data:', error);\n    }\n  };\n\n  // Real-time update handlers\n  const updateAttendanceData = useCallback((payload: AgentStatusEventPayload) => {\n    setMonitorData(prev => {\n      if (!prev) return prev;\n      \n      // Update attendance based on agent status change\n      const updatedAttendance = prev.employee_attendance.map(emp => {\n        if (emp.employee_id === payload.agent_id) {\n          return {\n            ...emp,\n            status: payload.status === 'available' ? 'clocked_in' as const : 'clocked_out' as const,\n            time: new Date(payload.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })\n          };\n        }\n        return emp;\n      });\n      \n      return {\n        ...prev,\n        employee_attendance: updatedAttendance,\n        last_updated: new Date().toISOString()\n      };\n    });\n    \n    setLastUpdateTime(new Date().toLocaleString('ru-RU'));\n  }, []);\n\n  const updateQueueData = useCallback((payload: QueueMetricsEventPayload) => {\n    setMonitorData(prev => {\n      if (!prev) return prev;\n      \n      // Update call queue metrics\n      const updatedQueues = prev.call_queues.map(queue => {\n        if (queue.queue_id === payload.queue_id) {\n          const avgWaitTime = payload.metrics.avg_wait_time || 0;\n          return {\n            ...queue,\n            calls_waiting: payload.metrics.calls_in_queue || 0,\n            avg_queue_time: avgWaitTime,\n            status: avgWaitTime > queue.threshold ? 'critical' as const : 'ok' as const\n          };\n        }\n        return queue;\n      });\n      \n      return {\n        ...prev,\n        call_queues: updatedQueues,\n        last_updated: new Date().toISOString()\n      };\n    });\n    \n    setLastUpdateTime(new Date().toLocaleString('ru-RU'));\n  }, []);\n\n  const addNewAlert = useCallback((payload: SLAAlertEventPayload) => {\n    setMonitorData(prev => {\n      if (!prev) return prev;\n      \n      const newAlert = {\n        id: payload.alert_id,\n        type: payload.alert_type,\n        message: `SLA Alert: ${payload.alert_type}`,\n        severity: 'warning' as const,\n        timestamp: new Date().toISOString()\n      };\n      \n      return {\n        ...prev,\n        active_alerts: [newAlert, ...prev.active_alerts].slice(0, 10), // Keep last 10 alerts\n        last_updated: new Date().toISOString()\n      };\n    });\n    \n    setLastUpdateTime(new Date().toLocaleString('ru-RU'));\n  }, []);\n\n  const handleRefresh = useCallback(async () => {\n    await loadInitialData();\n    await checkApiHealth();\n  }, []);\n\n  const toggleMonitoring = useCallback(() => {\n    setIsMonitoring(prev => !prev);\n    if (isMonitoring) {\n      // Pause WebSocket updates\n      if (wsClient.current) {\n        wsClient.current.disconnect();\n      }\n    } else {\n      // Resume WebSocket updates\n      initializeWebSocket();\n    }\n  }, [isMonitoring, initializeWebSocket]);\n\n  const acknowledgeAlert = useCallback((alertId: string) => {\n    setMonitorData(prev => {\n      if (!prev) return prev;\n      \n      return {\n        ...prev,\n        active_alerts: prev.active_alerts.filter(alert => alert.id !== alertId)\n      };\n    });\n  }, []);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'ok':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'critical':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <Activity className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'ok':\n        return 'bg-green-100 text-green-800';\n      case 'warning':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'critical':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (!monitorData) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <RefreshCw className=\"h-8 w-8 animate-spin text-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Загрузка мониторинга в реальном времени...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">{russianMonitoringTranslations.title}</h1>\n            <p className=\"text-gray-600 mt-1\">{russianMonitoringTranslations.subtitle}</p>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Connection Status */}\n            <div className=\"flex items-center space-x-2\">\n              {isConnected ? (\n                <>\n                  <Wifi className=\"h-5 w-5 text-green-500\" />\n                  <span className=\"text-sm text-green-600\">{russianMonitoringTranslations.status.connected}</span>\n                </>\n              ) : (\n                <>\n                  <WifiOff className=\"h-5 w-5 text-red-500\" />\n                  <span className=\"text-sm text-red-600\">{russianMonitoringTranslations.status.disconnected}</span>\n                </>\n              )}\n            </div>\n            \n            {/* API Health */}\n            <div className={`w-2 h-2 rounded-full ${\n              apiHealthy ? 'bg-green-500' : 'bg-red-500'\n            }`}></div>\n            \n            {/* Controls */}\n            <button\n              onClick={toggleMonitoring}\n              className=\"flex items-center px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n            >\n              {isMonitoring ? (\n                <>\n                  <Pause className=\"h-4 w-4 mr-2\" />\n                  {russianMonitoringTranslations.actions.pause_monitoring}\n                </>\n              ) : (\n                <>\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  {russianMonitoringTranslations.actions.resume_monitoring}\n                </>\n              )}\n            </button>\n            \n            <button\n              onClick={handleRefresh}\n              className=\"flex items-center px-3 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors\"\n            >\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              {russianMonitoringTranslations.actions.refresh}\n            </button>\n          </div>\n        </div>\n        \n        {/* Last Update Time */}\n        <div className=\"mt-4 text-sm text-gray-500\">\n          {russianMonitoringTranslations.metrics.last_updated}: {lastUpdateTime}\n          {connectionLost && (\n            <span className=\"ml-4 text-red-600 font-medium\">\n              ⚠️ Соединение потеряно - попытка переподключения...\n            </span>\n          )}\n        </div>\n      </div>\n\n      {/* Staff Coverage Section */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n          {russianMonitoringTranslations.sections.staff_coverage}\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {monitorData.staff_coverage.map((dept, idx) => (\n            <div key={idx} className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-medium text-gray-900\">{dept.department}</h3>\n                {getStatusIcon(dept.status)}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">{russianMonitoringTranslations.metrics.required}:</span>\n                  <span className=\"font-medium\">{dept.required}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">{russianMonitoringTranslations.metrics.present}:</span>\n                  <span className=\"font-medium\">{dept.present}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">{russianMonitoringTranslations.metrics.coverage}:</span>\n                  <span className={`font-medium ${\n                    dept.coverage >= 100 ? 'text-green-600' :\n                    dept.coverage >= 90 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {dept.coverage}%\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"mt-4\">\n                <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n                  <span>0%</span>\n                  <span>100%</span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className={`h-2 rounded-full ${\n                      dept.coverage >= 100 ? 'bg-green-500' :\n                      dept.coverage >= 90 ? 'bg-yellow-500' : 'bg-red-500'\n                    }`}\n                    style={{ width: `${Math.min(dept.coverage, 100)}%` }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Call Queues Section */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n          {russianMonitoringTranslations.sections.call_queues}\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {monitorData.call_queues.map((queue, idx) => (\n            <div key={idx} className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"font-medium text-gray-900\">{queue.queue_id.replace('_', ' ').toUpperCase()}</h3>\n                {getStatusIcon(queue.status)}\n              </div>\n              \n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">{russianMonitoringTranslations.metrics.calls_waiting}:</span>\n                  <span className=\"text-2xl font-bold text-blue-600\">{queue.calls_waiting}</span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">{russianMonitoringTranslations.metrics.avg_queue_time}:</span>\n                  <span className={`text-lg font-semibold ${\n                    queue.avg_queue_time > queue.threshold ? 'text-red-600' : 'text-green-600'\n                  }`}>\n                    {Math.floor(queue.avg_queue_time / 60)}:{(queue.avg_queue_time % 60).toString().padStart(2, '0')}\n                  </span>\n                </div>\n                \n                <div className=\"text-xs text-gray-500\">\n                  Пороговое значение: {Math.floor(queue.threshold / 60)}:{(queue.threshold % 60).toString().padStart(2, '0')}\n                </div>\n                \n                {queue.suggested_action && queue.status === 'critical' && (\n                  <div className=\"mt-3 p-3 bg-red-50 border border-red-200 rounded\">\n                    <p className=\"text-sm text-red-800\">\n                      <strong>Рекомендация:</strong> {queue.suggested_action}\n                    </p>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Employee Attendance Section */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n          {russianMonitoringTranslations.sections.attendance}\n        </h2>\n        <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Сотрудник\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Статус\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Время\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Местоположение\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Детали\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {monitorData.employee_attendance.map((emp) => (\n                  <tr key={emp.employee_id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {emp.employee_name}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                        getStatusColor(emp.status === 'clocked_in' ? 'ok' :\n                                     emp.status === 'late' ? 'warning' : 'critical')\n                      }`}>\n                        {russianMonitoringTranslations.status[emp.status]}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {emp.time}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {emp.location}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {emp.duration || '-'}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      {/* System Performance Section */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n          {russianMonitoringTranslations.sections.system_health}\n        </h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {monitorData.system_performance.map((perf, idx) => (\n            <div key={idx} className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center\">\n                  {perf.component === 'Database' ? <Database className=\"h-6 w-6 text-blue-600 mr-2\" /> :\n                   perf.component === 'API Server' ? <Server className=\"h-6 w-6 text-green-600 mr-2\" /> :\n                   <MemoryStick className=\"h-6 w-6 text-purple-600 mr-2\" />}\n                  <h3 className=\"font-medium text-gray-900\">{perf.component}</h3>\n                </div>\n                {getStatusIcon(perf.status)}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">{perf.metric}:</span>\n                  <span className={`font-medium ${\n                    perf.status === 'ok' ? 'text-green-600' :\n                    perf.status === 'warning' ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {perf.value}{perf.unit}\n                  </span>\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  Пороговое значение: {perf.threshold}{perf.unit}\n                </div>\n              </div>\n              \n              <div className=\"mt-4\">\n                <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n                  <span>0{perf.unit}</span>\n                  <span>{perf.threshold * 1.5}{perf.unit}</span>\n                </div>\n                <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                  <div \n                    className={`h-2 rounded-full ${\n                      perf.status === 'ok' ? 'bg-green-500' :\n                      perf.status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'\n                    }`}\n                    style={{ \n                      width: `${Math.min((perf.value / (perf.threshold * 1.5)) * 100, 100)}%` \n                    }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Active Alerts Section */}\n      <div className=\"mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n          {russianMonitoringTranslations.sections.alerts}\n        </h2>\n        <div className=\"space-y-3\">\n          {monitorData.active_alerts.length === 0 ? (\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"h-5 w-5 text-green-500 mr-2\" />\n                <span className=\"text-green-800\">Активных уведомлений нет</span>\n              </div>\n            </div>\n          ) : (\n            monitorData.active_alerts.map((alert) => (\n              <div \n                key={alert.id} \n                className={`border rounded-lg p-4 ${\n                  alert.severity === 'critical' ? 'bg-red-50 border-red-200' :\n                  alert.severity === 'warning' ? 'bg-yellow-50 border-yellow-200' :\n                  'bg-blue-50 border-blue-200'\n                }`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start\">\n                    {alert.severity === 'critical' ? \n                      <XCircle className=\"h-5 w-5 text-red-500 mr-3 mt-0.5\" /> :\n                      alert.severity === 'warning' ?\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-500 mr-3 mt-0.5\" /> :\n                      <Bell className=\"h-5 w-5 text-blue-500 mr-3 mt-0.5\" />\n                    }\n                    <div>\n                      <h4 className={`font-medium ${\n                        alert.severity === 'critical' ? 'text-red-900' :\n                        alert.severity === 'warning' ? 'text-yellow-900' :\n                        'text-blue-900'\n                      }`}>\n                        {alert.type}\n                      </h4>\n                      <p className={`text-sm mt-1 ${\n                        alert.severity === 'critical' ? 'text-red-700' :\n                        alert.severity === 'warning' ? 'text-yellow-700' :\n                        'text-blue-700'\n                      }`}>\n                        {alert.message}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {new Date(alert.timestamp).toLocaleString('ru-RU')}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <button\n                    onClick={() => acknowledgeAlert(alert.id)}\n                    className={`px-3 py-1 text-xs rounded ${\n                      alert.severity === 'critical' ? 'bg-red-100 text-red-700 hover:bg-red-200' :\n                      alert.severity === 'warning' ? 'bg-yellow-100 text-yellow-700 hover:bg-yellow-200' :\n                      'bg-blue-100 text-blue-700 hover:bg-blue-200'\n                    } transition-colors`}\n                  >\n                    {russianMonitoringTranslations.actions.acknowledge_alert}\n                  </button>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RealTimeMonitor;"