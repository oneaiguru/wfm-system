import React, { useState, useEffect } from 'react';

interface OptimizationSuggestion {
  id: string;
  title: string;
  description: string;
  impact: 'high' | 'medium' | 'low';
  effort: 'high' | 'medium' | 'low';
  category: 'performance' | 'efficiency' | 'automation';
  estimatedSavings: {
    timeHours: number;
    costRubles: number;
  };
  status: 'pending' | 'implementing' | 'completed' | 'rejected';
}

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000/api/v1';

const WorkflowOptimization: React.FC = () => {
  const [suggestions, setSuggestions] = useState<OptimizationSuggestion[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    fetchSuggestions();
  }, []);

  const fetchSuggestions = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${API_BASE_URL}/workflow/optimization/suggestions`);
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
      const data = await response.json();
      setSuggestions(data.suggestions || []);
      setError(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const updateSuggestionStatus = async (suggestionId: string, status: string) => {
    try {
      const response = await fetch(`${API_BASE_URL}/workflow/optimization/suggestions/${suggestionId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status }),
      });
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      setSuggestions(prev => prev.map(s => 
        s.id === suggestionId ? { ...s, status: status as any } : s
      ));
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high': return '#e74c3c';
      case 'medium': return '#f39c12';
      case 'low': return '#27ae60';
      default: return '#95a5a6';
    }
  };

  if (loading) {
    return (
      <div className="workflow-optimization">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="workflow-optimization">
      <div className="optimization-header">
        <h1>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h1>
        <button className="refresh-btn" onClick={fetchSuggestions}>
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        </button>
      </div>

      {error && (
        <div className="error-message">
          <span className="error-icon">‚ö†Ô∏è</span>
          {error}
          <button onClick={() => setError(null)}>‚úï</button>
        </div>
      )}

      <div className="optimization-stats">
        <div className="stat-card">
          <h3>–í—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</h3>
          <div className="stat-value">{suggestions.length}</div>
        </div>
        <div className="stat-card">
          <h3>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è</h3>
          <div className="stat-value">
            {suggestions.reduce((acc, s) => acc + s.estimatedSavings.timeHours, 0)} —á–∞—Å–æ–≤
          </div>
        </div>
        <div className="stat-card">
          <h3>–≠–∫–æ–Ω–æ–º–∏—è —Å—Ä–µ–¥—Å—Ç–≤</h3>
          <div className="stat-value">
            {suggestions.reduce((acc, s) => acc + s.estimatedSavings.costRubles, 0).toLocaleString()} ‚ÇΩ
          </div>
        </div>
      </div>

      <div className="suggestions-grid">
        {suggestions.map(suggestion => (
          <div key={suggestion.id} className="suggestion-card">
            <div className="suggestion-header">
              <h3>{suggestion.title}</h3>
              <div className="badges">
                <span 
                  className="impact-badge" 
                  style={{ backgroundColor: getImpactColor(suggestion.impact) }}
                >
                  {suggestion.impact === 'high' ? '–í—ã—Å–æ–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç' : 
                   suggestion.impact === 'medium' ? '–°—Ä–µ–¥–Ω–∏–π —ç—Ñ—Ñ–µ–∫—Ç' : '–ù–∏–∑–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç'}
                </span>
                <span className={`status-badge ${suggestion.status}`}>
                  {suggestion.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç' :
                   suggestion.status === 'implementing' ? '–í–Ω–µ–¥—Ä—è–µ—Ç—Å—è' :
                   suggestion.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'}
                </span>
              </div>
            </div>

            <p className="suggestion-description">{suggestion.description}</p>

            <div className="suggestion-metrics">
              <div className="metric">
                <span className="metric-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>
                <span className="metric-value">
                  {suggestion.category === 'performance' ? '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å' :
                   suggestion.category === 'efficiency' ? '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å' : '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'}
                </span>
              </div>
              <div className="metric">
                <span className="metric-label">–£—Å–∏–ª–∏—è:</span>
                <span className="metric-value">
                  {suggestion.effort === 'high' ? '–í—ã—Å–æ–∫–∏–µ' :
                   suggestion.effort === 'medium' ? '–°—Ä–µ–¥–Ω–∏–µ' : '–ù–∏–∑–∫–∏–µ'}
                </span>
              </div>
            </div>

            <div className="savings-info">
              <div className="savings-item">
                <span>üí∞ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {suggestion.estimatedSavings.timeHours} —á–∞—Å–æ–≤</span>
              </div>
              <div className="savings-item">
                <span>üíµ –≠–∫–æ–Ω–æ–º–∏—è —Å—Ä–µ–¥—Å—Ç–≤: {suggestion.estimatedSavings.costRubles.toLocaleString()} ‚ÇΩ</span>
              </div>
            </div>

            <div className="suggestion-actions">
              <button 
                className="implement-btn"
                onClick={() => updateSuggestionStatus(suggestion.id, 'implementing')}
                disabled={suggestion.status !== 'pending'}
              >
                –í–Ω–µ–¥—Ä–∏—Ç—å
              </button>
              <button 
                className="reject-btn"
                onClick={() => updateSuggestionStatus(suggestion.id, 'rejected')}
                disabled={suggestion.status !== 'pending'}
              >
                –û—Ç–∫–ª–æ–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        ))}

        {suggestions.length === 0 && (
          <div className="empty-state">
            <div className="empty-icon">üéØ</div>
            <h3>–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</h3>
            <p>–í–∞—à–∏ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∞–Ω–∞–ª–∏–∑ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default WorkflowOptimization;