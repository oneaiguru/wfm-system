import React, { useState, useEffect } from 'react';
import './WorkflowAutomation.css';

interface AutomationRule {
  id: string;
  name: string;
  description: string;
  trigger: {
    type: 'schedule' | 'event' | 'condition';
    config: any;
  };
  actions: {
    type: string;
    config: any;
  }[];
  enabled: boolean;
  lastRun?: string;
  nextRun?: string;
}

interface TriggerCondition {
  field: string;
  operator: string;
  value: string;
}

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8001/api/v1';

const WorkflowAutomation: React.FC = () => {
  const [rules, setRules] = useState<AutomationRule[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [newRule, setNewRule] = useState<Partial<AutomationRule>>({
    name: '',
    description: '',
    trigger: { type: 'event', config: {} },
    actions: [],
    enabled: true
  });

  useEffect(() => {
    fetchAutomationRules();
  }, []);

  const fetchAutomationRules = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${API_BASE_URL}/workflow/automation/rules`);
      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
      }
      const data = await response.json();
      setRules(data.rules || []);
      setError(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const createAutomationRule = async (rule: Partial<AutomationRule>) => {
    try {
      const response = await fetch(`${API_BASE_URL}/workflow/automation/rules`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(rule),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
      }

      const newRuleData = await response.json();
      setRules(prev => [...prev, newRuleData]);
      setShowCreateModal(false);
      setNewRule({
        name: '',
        description: '',
        trigger: { type: 'event', config: {} },
        actions: [],
        enabled: true
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
    }
  };

  const toggleRule = async (ruleId: string, enabled: boolean) => {
    try {
      const response = await fetch(`${API_BASE_URL}/workflow/automation/rules/${ruleId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ enabled }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
      }

      setRules(prev => prev.map(rule => 
        rule.id === ruleId ? { ...rule, enabled } : rule
      ));
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
    }
  };

  const deleteRule = async (ruleId: string) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ?')) {
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/workflow/automation/rules/${ruleId}`, {
        method: 'DELETE',
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
      }

      setRules(prev => prev.filter(rule => rule.id !== ruleId));
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞');
    }
  };

  const addAction = () => {
    setNewRule(prev => ({
      ...prev,
      actions: [...(prev.actions || []), { type: 'email', config: {} }]
    }));
  };

  const updateAction = (index: number, field: string, value: any) => {
    setNewRule(prev => ({
      ...prev,
      actions: prev.actions?.map((action, i) => 
        i === index ? { ...action, [field]: value } : action
      ) || []
    }));
  };

  const removeAction = (index: number) => {
    setNewRule(prev => ({
      ...prev,
      actions: prev.actions?.filter((_, i) => i !== index) || []
    }));
  };

  if (loading) {
    return (
      <div className="workflow-automation">
        <div className="loading-spinner">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="workflow-automation">
      <div className="automation-header">
        <h1>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</h1>
        <button 
          className="create-rule-btn"
          onClick={() => setShowCreateModal(true)}
        >
          + –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ
        </button>
      </div>

      {error && (
        <div className="error-message">
          <span className="error-icon">‚ö†Ô∏è</span>
          {error}
          <button onClick={() => setError(null)}>‚úï</button>
        </div>
      )}

      <div className="automation-stats">
        <div className="stat-card">
          <h3>–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª</h3>
          <div className="stat-value">{rules.length}</div>
        </div>
        <div className="stat-card">
          <h3>–ê–∫—Ç–∏–≤–Ω—ã—Ö</h3>
          <div className="stat-value">{rules.filter(r => r.enabled).length}</div>
        </div>
        <div className="stat-card">
          <h3>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è</h3>
          <div className="stat-value">
            {rules.filter(r => r.lastRun && 
              new Date(r.lastRun).toDateString() === new Date().toDateString()
            ).length}
          </div>
        </div>
      </div>

      <div className="rules-grid">
        {rules.map(rule => (
          <div key={rule.id} className={`rule-card ${rule.enabled ? 'enabled' : 'disabled'}`}>
            <div className="rule-header">
              <h3>{rule.name}</h3>
              <div className="rule-controls">
                <label className="switch">
                  <input
                    type="checkbox"
                    checked={rule.enabled}
                    onChange={(e) => toggleRule(rule.id, e.target.checked)}
                  />
                  <span className="slider"></span>
                </label>
                <button 
                  className="delete-btn"
                  onClick={() => deleteRule(rule.id)}
                  title="–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"
                >
                  üóëÔ∏è
                </button>
              </div>
            </div>
            
            <p className="rule-description">{rule.description}</p>
            
            <div className="rule-details">
              <div className="trigger-info">
                <strong>–¢—Ä–∏–≥–≥–µ—Ä:</strong> {rule.trigger.type === 'schedule' ? '–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é' : 
                  rule.trigger.type === 'event' ? '–ü–æ —Å–æ–±—ã—Ç–∏—é' : '–ü–æ —É—Å–ª–æ–≤–∏—é'}
              </div>
              <div className="actions-info">
                <strong>–î–µ–π—Å—Ç–≤–∏–π:</strong> {rule.actions.length}
              </div>
            </div>

            <div className="rule-status">
              {rule.lastRun && (
                <div className="last-run">
                  –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {new Date(rule.lastRun).toLocaleString('ru-RU')}
                </div>
              )}
              {rule.nextRun && (
                <div className="next-run">
                  –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {new Date(rule.nextRun).toLocaleString('ru-RU')}
                </div>
              )}
            </div>
          </div>
        ))}

        {rules.length === 0 && (
          <div className="empty-state">
            <div className="empty-icon">ü§ñ</div>
            <h3>–ù–µ—Ç –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h3>
            <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤</p>
            <button 
              className="create-first-rule-btn"
              onClick={() => setShowCreateModal(true)}
            >
              –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ
            </button>
          </div>
        )}
      </div>

      {showCreateModal && (
        <div className="modal-overlay">
          <div className="create-rule-modal">
            <div className="modal-header">
              <h2>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h2>
              <button 
                className="close-btn"
                onClick={() => setShowCreateModal(false)}
              >
                ‚úï
              </button>
            </div>

            <div className="modal-body">
              <div className="form-group">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞</label>
                <input
                  type="text"
                  value={newRule.name || ''}
                  onChange={(e) => setNewRule(prev => ({ ...prev, name: e.target.value }))}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"
                />
              </div>

              <div className="form-group">
                <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea
                  value={newRule.description || ''}
                  onChange={(e) => setNewRule(prev => ({ ...prev, description: e.target.value }))}
                  placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞"
                  rows={3}
                />
              </div>

              <div className="form-group">
                <label>–¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞</label>
                <select
                  value={newRule.trigger?.type || 'event'}
                  onChange={(e) => setNewRule(prev => ({
                    ...prev,
                    trigger: { type: e.target.value as any, config: {} }
                  }))}
                >
                  <option value="event">–ü–æ —Å–æ–±—ã—Ç–∏—é</option>
                  <option value="schedule">–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é</option>
                  <option value="condition">–ü–æ —É—Å–ª–æ–≤–∏—é</option>
                </select>
              </div>

              <div className="form-group">
                <label>–î–µ–π—Å—Ç–≤–∏—è</label>
                <div className="actions-list">
                  {newRule.actions?.map((action, index) => (
                    <div key={index} className="action-item">
                      <select
                        value={action.type}
                        onChange={(e) => updateAction(index, 'type', e.target.value)}
                      >
                        <option value="email">–û—Ç–ø—Ä–∞–≤–∏—Ç—å email</option>
                        <option value="notification">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</option>
                        <option value="webhook">Webhook</option>
                        <option value="approve">–ê–≤—Ç–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ</option>
                      </select>
                      <button 
                        className="remove-action"
                        onClick={() => removeAction(index)}
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  ))}
                  <button 
                    className="add-action-btn"
                    onClick={addAction}
                    type="button"
                  >
                    + –î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
                  </button>
                </div>
              </div>
            </div>

            <div className="modal-footer">
              <button 
                className="cancel-btn"
                onClick={() => setShowCreateModal(false)}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                className="save-btn"
                onClick={() => createAutomationRule(newRule)}
                disabled={!newRule.name || !newRule.description}
              >
                –°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default WorkflowAutomation;