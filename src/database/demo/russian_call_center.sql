-- =============================================================================
-- russian_call_center.sql
-- GREEN PHASE: Generate –û–û–û "–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å" Demo Data
-- =============================================================================
-- Purpose: Create realistic Russian call center scenario showing our superiority
-- Story: 50-agent Moscow call center, March tax season surge (1000‚Üí5000 calls)
-- =============================================================================

\echo '================================================================================'
\echo 'GENERATING –û–û–û "–¢–ï–•–ù–û–°–ï–†–í–ò–°" DEMO DATA'
\echo 'Moscow call center struggling with tax season'
\echo '================================================================================'

-- Clean up old demo data
DELETE FROM agent_status_realtime WHERE employee_tab_n LIKE 'TS%';
DELETE FROM argus_time_entries WHERE employee_tab_n LIKE 'TS%';
DELETE FROM historical_data WHERE project_id IN (SELECT id FROM forecasting_projects WHERE project_name LIKE '%–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å%');
DELETE FROM forecasting_projects WHERE project_name LIKE '%–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å%';
DELETE FROM zup_agent_data WHERE tab_n LIKE 'TS%';

-- =============================================================================
-- 1. Create 50 Russian agents
-- =============================================================================
\echo '\nüìä Creating 50 Russian agents...'

-- Common Russian surnames and names
WITH russian_names AS (
    SELECT * FROM (VALUES
        ('–ò–≤–∞–Ω–æ–≤', '–ò–≤–∞–Ω', '–ü–µ—Ç—Ä–æ–≤–∏—á'),
        ('–ü–µ—Ç—Ä–æ–≤', '–ü–µ—Ç—Ä', '–ò–≤–∞–Ω–æ–≤–∏—á'),
        ('–°–∏–¥–æ—Ä–æ–≤', '–ê–ª–µ–∫—Å–µ–π', '–°–µ—Ä–≥–µ–µ–≤–∏—á'),
        ('–°–º–∏—Ä–Ω–æ–≤–∞', '–ï–ª–µ–Ω–∞', '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞'),
        ('–ö–æ–∑–ª–æ–≤–∞', '–û–ª—å–≥–∞', '–ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞'),
        ('–ù–æ–≤–∏–∫–æ–≤–∞', '–ê–Ω–Ω–∞', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞'),
        ('–ú–æ—Ä–æ–∑–æ–≤', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–¥—Ä–µ–µ–≤–∏—á'),
        ('–í–æ–ª–∫–æ–≤', '–ú–∏—Ö–∞–∏–ª', '–Æ—Ä—å–µ–≤–∏—á'),
        ('–°–æ–∫–æ–ª–æ–≤', '–°–µ—Ä–≥–µ–π', '–ü–∞–≤–ª–æ–≤–∏—á'),
        ('–ü–æ–ø–æ–≤–∞', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞'),
        ('–õ–µ–±–µ–¥–µ–≤–∞', '–¢–∞—Ç—å—è–Ω–∞', '–ò–≥–æ—Ä–µ–≤–Ω–∞'),
        ('–ö—É–∑–Ω–µ—Ü–æ–≤', '–ê–Ω–¥—Ä–µ–π', '–í–∏–∫—Ç–æ—Ä–æ–≤–∏—á'),
        ('–ù–∏–∫–æ–ª–∞–µ–≤', '–ù–∏–∫–æ–ª–∞–π', '–ù–∏–∫–æ–ª–∞–µ–≤–∏—á'),
        ('–í–∞—Å–∏–ª—å–µ–≤–∞', '–ù–∞—Ç–∞–ª—å—è', '–°–µ—Ä–≥–µ–µ–≤–Ω–∞'),
        ('–§–µ–¥–æ—Ä–æ–≤', '–§–µ–¥–æ—Ä', '–§–µ–¥–æ—Ä–æ–≤–∏—á'),
        ('–ú–∏—Ö–∞–π–ª–æ–≤–∞', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞'),
        ('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á'),
        ('–†–æ–º–∞–Ω–æ–≤–∞', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–†–æ–º–∞–Ω–æ–≤–Ω–∞'),
        ('–ó–∞—Ö–∞—Ä–æ–≤', '–ü–∞–≤–µ–ª', '–û–ª–µ–≥–æ–≤–∏—á'),
        ('–ì—Ä–∏–≥–æ—Ä—å–µ–≤–∞', '–õ—é–¥–º–∏–ª–∞', '–í–∞—Å–∏–ª—å–µ–≤–Ω–∞')
    ) AS t(surname, name, patronymic)
)
INSERT INTO zup_agent_data (tab_n, fio_full, position_name, department, email, mobile_phone, hire_date)
SELECT 
    'TS' || LPAD(row_number()::text, 3, '0') as tab_n,
    rn.surname || ' ' || rn.name || ' ' || rn.patronymic as fio_full,
    CASE 
        WHEN row_number() = 1 THEN 'Supervisor'
        WHEN row_number() <= 5 THEN 'Team Lead'
        WHEN row_number() <= 15 THEN 'Senior Agent'
        ELSE 'Agent'
    END as position_name,
    '–û–û–û –¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å - Call Center' as department,
    lower(rn.name || '.' || rn.surname || '@technoservice.ru') as email,
    '+7 (495) 123-' || LPAD((4000 + row_number())::text, 4, '0') as mobile_phone,
    CURRENT_DATE - INTERVAL '2 years' + (random() * INTERVAL '700 days')::interval as hire_date
FROM russian_names rn
CROSS JOIN generate_series(1, 3) as g(n); -- 20 names x 3 = 60, take first 50

-- Add remaining agents to reach 50
INSERT INTO zup_agent_data (tab_n, fio_full, position_name, department, email, mobile_phone, hire_date)
SELECT 
    'TS' || LPAD((20 + n)::text, 3, '0') as tab_n,
    CASE n % 10
        WHEN 1 THEN '–ï–≥–æ—Ä–æ–≤ –ï–≥–æ—Ä –ï–≥–æ—Ä–æ–≤–∏—á'
        WHEN 2 THEN '–ë–µ–ª–æ–≤–∞ –í–µ—Ä–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞'
        WHEN 3 THEN '–ö–æ–º–∞—Ä–æ–≤ –ê—Ä—Ç–µ–º –î–µ–Ω–∏—Å–æ–≤–∏—á'
        WHEN 4 THEN '–û—Ä–ª–æ–≤–∞ –Æ–ª–∏—è –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞'
        WHEN 5 THEN '–ö–∏—Å–µ–ª–µ–≤ –ò–ª—å—è –†–æ–º–∞–Ω–æ–≤–∏—á'
        WHEN 6 THEN '–ú–∞–∫–∞—Ä–æ–≤–∞ –î–∞—Ä—å—è –ö–∏—Ä–∏–ª–ª–æ–≤–Ω–∞'
        WHEN 7 THEN '–ê–Ω–¥—Ä–µ–µ–≤ –ö–∏—Ä–∏–ª–ª –ú–∞–∫—Å–∏–º–æ–≤–∏—á'
        WHEN 8 THEN '–ö–æ–≤–∞–ª–µ–≤–∞ –ö—Å–µ–Ω–∏—è –ê—Ä—Ç–µ–º–æ–≤–Ω–∞'
        WHEN 9 THEN '–ò–ª—å–∏–Ω –ú–∞–∫—Å–∏–º –ò–ª—å–∏—á'
        ELSE '–ì—É—Å–µ–≤–∞ –ê–ª–∏–Ω–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞'
    END as fio_full,
    'Agent' as position_name,
    '–û–û–û –¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å - Call Center' as department,
    'agent' || n || '@technoservice.ru' as email,
    '+7 (495) 124-' || LPAD((n)::text, 4, '0') as mobile_phone,
    CURRENT_DATE - (random() * INTERVAL '500 days')::interval as hire_date
FROM generate_series(1, 30) as n
LIMIT 30;

-- =============================================================================
-- 2. Create Russian holidays
-- =============================================================================
\echo '\nüóìÔ∏è Adding Russian holidays...'

INSERT INTO holidays (holiday_date, holiday_name, is_holiday) VALUES
('2025-01-01', '–ù–æ–≤—ã–π –≥–æ–¥', true),
('2025-01-02', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã', true),
('2025-01-03', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã', true),
('2025-01-04', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã', true),
('2025-01-05', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã', true),
('2025-01-06', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã', true),
('2025-01-07', '–†–æ–∂–¥–µ—Å—Ç–≤–æ –•—Ä–∏—Å—Ç–æ–≤–æ', true),
('2025-01-08', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã', true),
('2025-02-23', '–î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞', true),
('2025-03-08', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å', true),
('2025-05-01', '–ü—Ä–∞–∑–¥–Ω–∏–∫ –í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞', true),
('2025-05-09', '–î–µ–Ω—å –ü–æ–±–µ–¥—ã', true),
('2025-06-12', '–î–µ–Ω—å –†–æ—Å—Å–∏–∏', true),
('2025-11-04', '–î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞', true)
ON CONFLICT (holiday_date) DO NOTHING;

-- =============================================================================
-- 3. Create forecasting project for tax season
-- =============================================================================
\echo '\nüìà Creating tax season forecasting project...'

INSERT INTO forecasting_projects (id, project_name, service_id, group_id, start_date, end_date, project_status)
VALUES (
    'f47ac10b-58cc-4372-a567-0e02b2c3d479',
    '–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å - –ù–∞–ª–æ–≥–æ–≤—ã–π —Å–µ–∑–æ–Ω 2025',
    1,
    1,
    '2025-01-01',
    '2025-03-31',
    'COMPLETED'
);

-- =============================================================================
-- 4. Generate historical data showing surge
-- =============================================================================
\echo '\nüìä Generating historical data (Jan-Mar with surge)...'

-- January-February: Normal load (800-1200 calls/day)
INSERT INTO historical_data (project_id, data_datetime, call_volume, aht_seconds)
SELECT 
    'f47ac10b-58cc-4372-a567-0e02b2c3d479',
    generate_series(
        '2025-01-01 09:00:00'::timestamp,
        '2025-02-28 18:00:00'::timestamp,
        '1 hour'::interval
    ) as data_datetime,
    CASE 
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 9 AND 11 THEN 80 + (random() * 40)::int
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 12 AND 14 THEN 100 + (random() * 50)::int
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 15 AND 17 THEN 90 + (random() * 30)::int
        ELSE 40 + (random() * 20)::int
    END as call_volume,
    180 + (random() * 60)::int as aht_seconds
WHERE EXTRACT(hour FROM generate_series) BETWEEN 9 AND 18
AND EXTRACT(dow FROM generate_series) BETWEEN 1 AND 5; -- Weekdays only

-- March: Tax season surge (3000-5000 calls/day)
INSERT INTO historical_data (project_id, data_datetime, call_volume, aht_seconds)
SELECT 
    'f47ac10b-58cc-4372-a567-0e02b2c3d479',
    generate_series(
        '2025-03-01 09:00:00'::timestamp,
        '2025-03-31 18:00:00'::timestamp,
        '1 hour'::interval
    ) as data_datetime,
    CASE 
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 9 AND 11 THEN 400 + (random() * 200)::int
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 12 AND 14 THEN 500 + (random() * 250)::int
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 15 AND 17 THEN 450 + (random() * 150)::int
        ELSE 200 + (random() * 100)::int
    END as call_volume,
    240 + (random() * 120)::int as aht_seconds -- Longer calls during tax season
WHERE EXTRACT(hour FROM generate_series) BETWEEN 9 AND 18
AND EXTRACT(dow FROM generate_series) BETWEEN 1 AND 5;

-- =============================================================================
-- 5. Generate forecasts showing the surge
-- =============================================================================
\echo '\nüîÆ Generating forecasts for March surge...'

-- Call volume forecasts
INSERT INTO call_volume_forecasts (project_id, forecast_datetime, forecast_value)
SELECT 
    'f47ac10b-58cc-4372-a567-0e02b2c3d479',
    generate_series(
        CURRENT_DATE::timestamp,
        (CURRENT_DATE + INTERVAL '7 days')::timestamp,
        '1 hour'::interval
    ) as forecast_datetime,
    CASE 
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 9 AND 11 THEN 450 + (random() * 100)::int
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 12 AND 14 THEN 550 + (random() * 100)::int
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 15 AND 17 THEN 500 + (random() * 100)::int
        ELSE 250 + (random() * 50)::int
    END as forecast_value
WHERE EXTRACT(hour FROM generate_series) BETWEEN 9 AND 18;

-- Operator requirements (showing understaffing)
INSERT INTO operator_forecasts (project_id, interval_datetime, operator_requirement)
SELECT 
    'f47ac10b-58cc-4372-a567-0e02b2c3d479',
    generate_series(
        CURRENT_DATE::timestamp,
        (CURRENT_DATE + INTERVAL '7 days')::timestamp,
        '30 minutes'::interval
    ) as interval_datetime,
    CASE 
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 9 AND 11 THEN 55 + (random() * 10)::int
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 12 AND 14 THEN 65 + (random() * 10)::int
        WHEN EXTRACT(hour FROM generate_series) BETWEEN 15 AND 17 THEN 60 + (random() * 10)::int
        ELSE 30 + (random() * 10)::int
    END as operator_requirement
WHERE EXTRACT(hour FROM generate_series) BETWEEN 9 AND 18;

-- =============================================================================
-- 6. Create real-time monitoring data
-- =============================================================================
\echo '\n‚ö° Populating real-time dashboards...'

-- Current agent status (45 working, 5 on break)
INSERT INTO agent_status_realtime (employee_tab_n, employee_name, current_status, status_russian, time_code, last_updated)
SELECT 
    tab_n,
    fio_full,
    CASE 
        WHEN random() < 0.7 THEN 'In Call'
        WHEN random() < 0.85 THEN 'Available'
        WHEN random() < 0.95 THEN 'Break'
        ELSE 'Not Ready'
    END as current_status,
    CASE 
        WHEN random() < 0.7 THEN '–í —Ä–∞–±–æ—Ç–µ'
        WHEN random() < 0.85 THEN '–î–æ—Å—Ç—É–ø–µ–Ω'
        WHEN random() < 0.95 THEN '–ù–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ'
        ELSE '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    END as status_russian,
    'I' as time_code,
    CURRENT_TIMESTAMP - (random() * INTERVAL '30 minutes')
FROM zup_agent_data
WHERE tab_n LIKE 'TS%'
LIMIT 50;

-- Service level monitoring (showing degradation)
INSERT INTO service_level_monitoring (
    service_name, current_service_level, target_service_level,
    calls_offered, calls_answered, calls_abandoned, average_wait_time
) VALUES (
    '–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å - –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è',
    58.5, -- Below target!
    80.0,
    4500,
    2633,
    1867,
    245.7 -- Long wait time
);

-- Coverage analysis showing gap
INSERT INTO coverage_analysis_realtime (
    time_interval, required_agents, available_agents, 
    coverage_gap, coverage_percentage, status
) VALUES (
    CURRENT_TIMESTAMP,
    65, -- Need 65 agents
    45, -- Only 45 available
    20, -- Gap of 20!
    69.2,
    'CRITICAL'
);

-- Executive KPIs
INSERT INTO executive_kpi_dashboard (kpi_name, kpi_value, kpi_target, kpi_unit, kpi_status) VALUES
('Service Level', 58.5, 80.0, '%', 'CRITICAL'),
('Agent Utilization', 94.5, 85.0, '%', 'WARNING'),
('Forecast Accuracy', 85.0, 60.0, '%', 'EXCELLENT'),
('Average Wait Time', 245.7, 60.0, 'seconds', 'CRITICAL'),
('Schedule Optimization Time', 87, 415, 'ms', 'EXCELLENT'),
('Calls per Agent', 100, 80, 'calls', 'WARNING');

-- =============================================================================
-- 7. Multi-skill configuration for tax specialists
-- =============================================================================
\echo '\nüéì Configuring multi-skill agents...'

-- Create tax-related skills
INSERT INTO skill_requirements (skill_id, skill_name) VALUES
(101, '–ù–∞–ª–æ–≥–æ–≤—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'),
(102, '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 1–°'),
(103, '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã'),
(104, 'VIP –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ')
ON CONFLICT DO NOTHING;

-- Assign skills to agents (multi-skill distribution)
INSERT INTO employee_skills (employee_id, skill_id)
SELECT 
    gen_random_uuid(),
    CASE 
        WHEN position_name = 'Senior Agent' THEN 101 -- Tax specialists
        WHEN position_name = 'Team Lead' THEN 102 -- 1C support
        ELSE 103 -- General questions
    END
FROM zup_agent_data
WHERE tab_n LIKE 'TS%';

-- Some agents have multiple skills
INSERT INTO employee_skills (employee_id, skill_id)
SELECT 
    gen_random_uuid(),
    104 -- VIP service
FROM zup_agent_data
WHERE position_name IN ('Team Lead', 'Supervisor')
AND tab_n LIKE 'TS%';

-- =============================================================================
-- 8. Create optimization project showing our superiority
-- =============================================================================
\echo '\nüöÄ Creating AI optimization project...'

INSERT INTO optimization_projects (
    id, project_name, optimization_date, agents_count, 
    algorithm_version, forecasting_project_id, project_status
) VALUES (
    '550e8400-e29b-41d4-a716-446655440000',
    '–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å - AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–Ω–∞–ª–æ–≥–æ–≤—ã–π —Å–µ–∑–æ–Ω)',
    CURRENT_DATE,
    50,
    'AI_GENETIC_V2',
    'f47ac10b-58cc-4372-a567-0e02b2c3d479',
    'ACTIVE'
);

-- Generate optimized schedule suggestions
INSERT INTO schedule_suggestions (
    optimization_project_id, employee_tab_n, 
    suggestion_status, efficiency_score
)
SELECT 
    '550e8400-e29b-41d4-a716-446655440000',
    tab_n,
    'PENDING',
    0.85 + (random() * 0.10) -- 85-95% efficiency
FROM zup_agent_data
WHERE tab_n LIKE 'TS%';

-- =============================================================================
-- 9. Create process for quick demo
-- =============================================================================
\echo '\n‚öôÔ∏è Setting up demo process...'

INSERT INTO process_definitions (
    process_name, process_status, execution_time_estimate
) VALUES (
    'Schedule Optimization',
    'ACTIVE',
    500 -- 500ms execution
) ON CONFLICT (process_name) DO NOTHING;

\echo '\n================================================================================'
\echo '‚úÖ DEMO DATA READY!'
\echo ''
\echo 'Scenario: –û–û–û "–¢–µ—Ö–Ω–æ–°–µ—Ä–≤–∏—Å" - 50 agents in Moscow'
\echo 'Problem: March tax season surge (5000 calls vs 1000 normal)'
\echo 'Argus fails: Service level drops to 58.5% (target 80%)'
\echo 'Our solution: AI optimization maintains 85% efficiency'
\echo ''
\echo 'Key metrics:'
\echo '- Coverage gap: 20 agents short'
\echo '- Wait time: 245 seconds (vs 60 target)'
\echo '- Our optimization: 87ms (vs Argus 415ms)'
\echo '- Multi-skill agents handle tax + general queries'
\echo '================================================================================'