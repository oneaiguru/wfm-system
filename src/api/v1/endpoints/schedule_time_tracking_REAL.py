"""
REAL SCHEDULE TIME TRACKING ENDPOINT
Task 45/50: Real-time Schedule Adherence and Time Tracking
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from pydantic import BaseModel
from datetime import datetime, date, time
from typing import Optional, List, Dict, Any
from uuid import UUID
import uuid
import json

from ...core.database import get_db

router = APIRouter()

class TimeTrackingRequest(BaseModel):
    schedule_id: UUID
    employee_id: UUID
    tracking_date: date
    actual_start_time: Optional[time] = None
    actual_end_time: Optional[time] = None
    break_times: Optional[List[Dict[str, Any]]] = None
    tracking_status: str = "–≤_–ø—Ä–æ—Ü–µ—Å—Å–µ"  # –≤_–ø—Ä–æ—Ü–µ—Å—Å–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ

class TimeTrackingResponse(BaseModel):
    tracking_id: str
    adherence_analysis: Dict[str, Any]
    schedule_compliance: Dict[str, Any]
    time_variances: Dict[str, Any]
    recommendations: List[str]
    message: str

@router.post("/schedules/time-tracking", response_model=TimeTrackingResponse, tags=["üî• REAL Schedule Analytics"])
async def track_schedule_adherence(
    request: TimeTrackingRequest,
    db: AsyncSession = Depends(get_db)
):
    """REAL TIME TRACKING - NO MOCKS! Tracks actual vs scheduled time adherence"""
    try:
        # Get scheduled shift details
        schedule_query = text("""
            SELECT 
                ws.id, ws.shift_assignments, ws.schedule_name,
                e.first_name, e.last_name
            FROM work_schedules_core ws
            JOIN employees e ON ws.employee_id = e.id
            WHERE ws.id = :schedule_id AND ws.employee_id = :employee_id
        """)
        
        schedule_result = await db.execute(schedule_query, {
            "schedule_id": request.schedule_id,
            "employee_id": request.employee_id
        })
        
        schedule = schedule_result.fetchone()
        if not schedule:
            raise HTTPException(
                status_code=404,
                detail=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {request.schedule_id} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {request.employee_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
        
        # Find scheduled shift for the tracking date
        shifts = json.loads(schedule.shift_assignments) if schedule.shift_assignments else []
        target_shift = None
        
        for shift in shifts:
            if shift.get("–¥–∞—Ç–∞") == request.tracking_date.isoformat():
                target_shift = shift
                break
        
        if not target_shift:
            raise HTTPException(
                status_code=404,
                detail=f"–°–º–µ–Ω–∞ –Ω–∞ –¥–∞—Ç—É {request.tracking_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
            )
        
        # Parse scheduled times
        scheduled_start = datetime.strptime(target_shift.get("–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞", "09:00"), "%H:%M").time()
        scheduled_end = datetime.strptime(target_shift.get("–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è", "17:00"), "%H:%M").time()
        scheduled_hours = target_shift.get("—á–∞—Å—ã", 8)
        
        # Calculate adherence if actual times provided
        adherence_analysis = {
            "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ_–≤—Ä–µ–º—è": {
                "–Ω–∞—á–∞–ª–æ": scheduled_start.strftime("%H:%M"),
                "–æ–∫–æ–Ω—á–∞–Ω–∏–µ": scheduled_end.strftime("%H:%M"),
                "—á–∞—Å—ã": scheduled_hours
            },
            "—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ_–≤—Ä–µ–º—è": {
                "–Ω–∞—á–∞–ª–æ": request.actual_start_time.strftime("%H:%M") if request.actual_start_time else "–Ω–µ_–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ",
                "–æ–∫–æ–Ω—á–∞–Ω–∏–µ": request.actual_end_time.strftime("%H:%M") if request.actual_end_time else "–Ω–µ_–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ",
                "—Å—Ç–∞—Ç—É—Å": request.tracking_status
            }
        }
        
        # Calculate variances
        time_variances = {
            "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–Ω–∞—á–∞–ª–∞_–º–∏–Ω—É—Ç—ã": 0,
            "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–æ–∫–æ–Ω—á–∞–Ω–∏—è_–º–∏–Ω—É—Ç—ã": 0,
            "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–æ–±—â–∏—Ö_—á–∞—Å–æ–≤": 0,
            "—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è": "—Ç–æ—á–Ω–æ"
        }
        
        if request.actual_start_time:
            start_diff = (datetime.combine(date.today(), request.actual_start_time) - 
                         datetime.combine(date.today(), scheduled_start)).total_seconds() / 60
            time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–Ω–∞—á–∞–ª–∞_–º–∏–Ω—É—Ç—ã"] = int(start_diff)
        
        if request.actual_end_time:
            end_diff = (datetime.combine(date.today(), request.actual_end_time) - 
                       datetime.combine(date.today(), scheduled_end)).total_seconds() / 60
            time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–æ–∫–æ–Ω—á–∞–Ω–∏—è_–º–∏–Ω—É—Ç—ã"] = int(end_diff)
        
        if request.actual_start_time and request.actual_end_time:
            actual_duration = (datetime.combine(date.today(), request.actual_end_time) - 
                             datetime.combine(date.today(), request.actual_start_time)).total_seconds() / 3600
            time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–æ–±—â–∏—Ö_—á–∞—Å–æ–≤"] = round(actual_duration - scheduled_hours, 2)
            
            # Determine adherence level
            total_variance_minutes = abs(time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–Ω–∞—á–∞–ª–∞_–º–∏–Ω—É—Ç—ã"]) + abs(time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–æ–∫–æ–Ω—á–∞–Ω–∏—è_–º–∏–Ω—É—Ç—ã"])
            
            if total_variance_minutes <= 5:
                time_variances["—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"] = "–æ—Ç–ª–∏—á–Ω–æ–µ"
            elif total_variance_minutes <= 15:
                time_variances["—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"] = "—Ö–æ—Ä–æ—à–µ–µ"
            elif total_variance_minutes <= 30:
                time_variances["—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"] = "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
            else:
                time_variances["—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"] = "–Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
        
        # Schedule compliance analysis
        schedule_compliance = {
            "—Ç–æ—á–Ω–æ—Å—Ç—å_–ø—Ä–∏—Ö–æ–¥–∞": "–≤_–Ω–æ—Ä–º–µ",
            "—Ç–æ—á–Ω–æ—Å—Ç—å_—É—Ö–æ–¥–∞": "–≤_–Ω–æ—Ä–º–µ",
            "—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_–ø–µ—Ä–µ—Ä—ã–≤–æ–≤": "–Ω–µ_–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è",
            "–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞": "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"
        }
        
        if abs(time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–Ω–∞—á–∞–ª–∞_–º–∏–Ω—É—Ç—ã"]) > 15:
            schedule_compliance["—Ç–æ—á–Ω–æ—Å—Ç—å_–ø—Ä–∏—Ö–æ–¥–∞"] = "–Ω–∞—Ä—É—à–µ–Ω–∏–µ"
        
        if abs(time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–æ–∫–æ–Ω—á–∞–Ω–∏—è_–º–∏–Ω—É—Ç—ã"]) > 15:
            schedule_compliance["—Ç–æ—á–Ω–æ—Å—Ç—å_—É—Ö–æ–¥–∞"] = "–Ω–∞—Ä—É—à–µ–Ω–∏–µ"
        
        if request.break_times:
            total_break_minutes = sum(
                (datetime.strptime(br.get("–∫–æ–Ω–µ—Ü", "00:00"), "%H:%M") - 
                 datetime.strptime(br.get("–Ω–∞—á–∞–ª–æ", "00:00"), "%H:%M")).total_seconds() / 60
                for br in request.break_times
            )
            
            if total_break_minutes > 90:  # More than 1.5 hours of breaks
                schedule_compliance["—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_–ø–µ—Ä–µ—Ä—ã–≤–æ–≤"] = "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ"
            elif total_break_minutes < 30:  # Less than 30 minutes
                schedule_compliance["—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_–ø–µ—Ä–µ—Ä—ã–≤–æ–≤"] = "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
            else:
                schedule_compliance["—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_–ø–µ—Ä–µ—Ä—ã–≤–æ–≤"] = "–≤_–Ω–æ—Ä–º–µ"
        
        # Overall compliance
        violations = [v for v in schedule_compliance.values() if v in ["–Ω–∞—Ä—É—à–µ–Ω–∏–µ", "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ", "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"]]
        if len(violations) > 1:
            schedule_compliance["–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞"] = "—Å–µ—Ä—å–µ–∑–Ω—ã–µ_–Ω–∞—Ä—É—à–µ–Ω–∏—è"
        elif len(violations) == 1:
            schedule_compliance["–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞"] = "–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ_–Ω–∞—Ä—É—à–µ–Ω–∏—è"
        
        # Generate recommendations
        recommendations = []
        
        if time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–Ω–∞—á–∞–ª–∞_–º–∏–Ω—É—Ç—ã"] > 15:
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –≤–æ–≤—Ä–µ–º—è")
        elif time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–Ω–∞—á–∞–ª–∞_–º–∏–Ω—É—Ç—ã"] < -15:
            recommendations.append("–†–∞–Ω–Ω–µ–µ –ø—Ä–∏–±—ã—Ç–∏–µ - —Ö–æ—Ä–æ—à–æ, –Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π")
        
        if abs(time_variances["–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–æ–±—â–∏—Ö_—á–∞—Å–æ–≤"]) > 1:
            recommendations.append(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –Ω–∞ {time_variances['–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–æ–±—â–∏—Ö_—á–∞—Å–æ–≤']} —á —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
        if schedule_compliance["—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_–ø–µ—Ä–µ—Ä—ã–≤–æ–≤"] == "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ":
            recommendations.append("–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ—Ä–º")
        
        if not recommendations:
            recommendations.append("–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ")
        
        # Store tracking record
        tracking_id = str(uuid.uuid4())
        current_time = datetime.utcnow()
        
        tracking_record_query = text("""
            INSERT INTO time_tracking 
            (id, schedule_id, employee_id, tracking_date, 
             scheduled_start, scheduled_end, actual_start, actual_end,
             break_times, time_variances, compliance_status, created_at)
            VALUES 
            (:id, :schedule_id, :employee_id, :tracking_date,
             :scheduled_start, :scheduled_end, :actual_start, :actual_end,
             :break_times, :variances, :compliance, :created_at)
        """)
        
        await db.execute(tracking_record_query, {
            'id': tracking_id,
            'schedule_id': request.schedule_id,
            'employee_id': request.employee_id,
            'tracking_date': request.tracking_date,
            'scheduled_start': scheduled_start,
            'scheduled_end': scheduled_end,
            'actual_start': request.actual_start_time,
            'actual_end': request.actual_end_time,
            'break_times': json.dumps(request.break_times) if request.break_times else None,
            'variances': json.dumps(time_variances),
            'compliance': schedule_compliance["–æ–±—â–∞—è_–æ—Ü–µ–Ω–∫–∞"],
            'created_at': current_time
        })
        
        await db.commit()
        
        return TimeTrackingResponse(
            tracking_id=tracking_id,
            adherence_analysis=adherence_analysis,
            schedule_compliance=schedule_compliance,
            time_variances=time_variances,
            recommendations=recommendations,
            message=f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {schedule.first_name} {schedule.last_name} –Ω–∞ {request.tracking_date}. –°–æ–±–ª—é–¥–µ–Ω–∏–µ: {time_variances['—Å–æ–±–ª—é–¥–µ–Ω–∏–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è']}"
        )
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {str(e)}"
        )

@router.get("/schedules/time-tracking/employee/{employee_id}", tags=["üî• REAL Schedule Analytics"])
async def get_employee_time_tracking(
    employee_id: UUID,
    days_back: Optional[int] = 7,
    db: AsyncSession = Depends(get_db)
):
    """Get time tracking history for employee"""
    try:
        end_date = date.today()
        start_date = end_date - timedelta(days=days_back)
        
        tracking_query = text("""
            SELECT 
                tt.tracking_date, tt.scheduled_start, tt.scheduled_end,
                tt.actual_start, tt.actual_end, tt.time_variances,
                tt.compliance_status, ws.schedule_name
            FROM time_tracking tt
            JOIN work_schedules_core ws ON tt.schedule_id = ws.id
            WHERE tt.employee_id = :employee_id
            AND tt.tracking_date >= :start_date
            AND tt.tracking_date <= :end_date
            ORDER BY tt.tracking_date DESC
        """)
        
        tracking_result = await db.execute(tracking_query, {
            "employee_id": employee_id,
            "start_date": start_date,
            "end_date": end_date
        })
        
        tracking_records = []
        for row in tracking_result.fetchall():
            variances = json.loads(row.time_variances) if row.time_variances else {}
            tracking_records.append({
                "–¥–∞—Ç–∞": row.tracking_date.isoformat(),
                "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": row.schedule_name,
                "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ_–≤—Ä–µ–º—è": f"{row.scheduled_start} - {row.scheduled_end}",
                "—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ_–≤—Ä–µ–º—è": f"{row.actual_start or '–Ω–µ_–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ'} - {row.actual_end or '–Ω–µ_–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ'}",
                "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è": variances,
                "—Å—Ç–∞—Ç—É—Å_—Å–æ–±–ª—é–¥–µ–Ω–∏—è": row.compliance_status
            })
        
        return {
            "employee_id": str(employee_id),
            "analysis_period": f"{start_date} - {end_date}",
            "tracking_records": tracking_records,
            "total_tracked_days": len(tracking_records)
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {str(e)}"
        )

from datetime import timedelta