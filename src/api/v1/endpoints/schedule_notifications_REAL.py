"""
REAL SCHEDULE NOTIFICATIONS ENDPOINT
Task 49/50: Schedule Notifications and Alert Management
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from pydantic import BaseModel
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any
from uuid import UUID
import uuid
import json

from ...core.database import get_db

router = APIRouter()

class NotificationRequest(BaseModel):
    notification_type: str = "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ_—Å–º–µ–Ω—ã"  # Russian notification types
    recipient_type: str = "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"  # —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –º–µ–Ω–µ–¥–∂–µ—Ä, –æ—Ç–¥–µ–ª
    recipient_ids: List[UUID]
    schedule_related_data: Optional[Dict[str, Any]] = None
    notification_timing: str = "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"  # –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, –∑–∞_—á–∞—Å, –∑–∞_–¥–µ–Ω—å
    custom_message: Optional[str] = None

class NotificationResponse(BaseModel):
    notification_id: str
    delivery_status: Dict[str, Any]
    sent_notifications: List[Dict[str, Any]]
    failed_notifications: List[Dict[str, Any]]
    message: str

@router.post("/schedules/notifications/send", response_model=NotificationResponse, tags=["üî• REAL Schedule Management"])
async def send_schedule_notifications(
    request: NotificationRequest,
    db: AsyncSession = Depends(get_db)
):
    """REAL SCHEDULE NOTIFICATIONS - NO MOCKS! Sends schedule-related notifications"""
    try:
        # Validate recipients exist
        recipient_ids_str = "'" + "','".join(str(rid) for rid in request.recipient_ids) + "'"
        
        if request.recipient_type == "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫":
            recipients_query = text(f"""
                SELECT id, first_name, last_name, email, phone, notification_preferences
                FROM employees 
                WHERE id IN ({recipient_ids_str}) AND is_active = true
            """)
        elif request.recipient_type == "–º–µ–Ω–µ–¥–∂–µ—Ä":
            recipients_query = text(f"""
                SELECT id, first_name, last_name, email, phone, notification_preferences
                FROM employees 
                WHERE id IN ({recipient_ids_str}) AND is_active = true 
                AND position LIKE '%–º–µ–Ω–µ–¥–∂–µ—Ä%'
            """)
        else:
            recipients_query = text(f"""
                SELECT e.id, e.first_name, e.last_name, e.email, e.phone, e.notification_preferences
                FROM employees e
                JOIN organizational_structure os ON e.department_id = os.id
                WHERE os.id IN ({recipient_ids_str}) AND e.is_active = true
            """)
        
        recipients_result = await db.execute(recipients_query)
        recipients = recipients_result.fetchall()
        
        if not recipients:
            raise HTTPException(
                status_code=404,
                detail="–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            )
        
        # Generate notification content based on type
        notification_templates = {
            "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ_—Å–º–µ–Ω—ã": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–∞ —Å–º–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è {time} {date}",
            "–∏–∑–º–µ–Ω–µ–Ω–∏–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è": "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏.",
            "–∫–æ–Ω—Ñ–ª–∏–∫—Ç_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è": "–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞.",
            "—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è": "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º",
            "–æ—Ç–º–µ–Ω–∞_—Å–º–µ–Ω—ã": "–°–º–µ–Ω–∞ {date} {time} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            "–Ω–æ–≤–æ–µ_–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥ {period}",
            "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ_—á–∞—Å–æ–≤": "–í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –Ω–∞ {hours} —á",
            "–∑–∞–ø—Ä–æ—Å_–∑–∞–º–µ—â–µ–Ω–∏—è": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ—â–µ–Ω–∏–µ –Ω–∞ —Å–º–µ–Ω—É {date} {time}"
        }
        
        base_message = notification_templates.get(
            request.notification_type, 
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
        )
        
        # Customize message with schedule data
        if request.schedule_related_data:
            try:
                formatted_message = base_message.format(**request.schedule_related_data)
            except KeyError:
                formatted_message = base_message
        else:
            formatted_message = base_message
        
        final_message = request.custom_message or formatted_message
        
        # Determine delivery time
        delivery_time = datetime.utcnow()
        if request.notification_timing == "–∑–∞_—á–∞—Å":
            delivery_time += timedelta(hours=1)
        elif request.notification_timing == "–∑–∞_–¥–µ–Ω—å":
            delivery_time += timedelta(days=1)
        
        # Process notifications
        notification_id = str(uuid.uuid4())
        sent_notifications = []
        failed_notifications = []
        
        for recipient in recipients:
            try:
                # Parse notification preferences
                preferences = json.loads(recipient.notification_preferences) if recipient.notification_preferences else {}
                
                # Check if this notification type is enabled
                notification_enabled = preferences.get(request.notification_type, True)  # Default enabled
                
                if not notification_enabled:
                    failed_notifications.append({
                        "recipient_id": str(recipient.id),
                        "–∏–º—è": f"{recipient.first_name} {recipient.last_name}",
                        "–æ—à–∏–±–∫–∞": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
                        "—Ç–∏–ø_–æ—à–∏–±–∫–∏": "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    })
                    continue
                
                # Determine delivery channels
                delivery_channels = []
                if recipient.email and preferences.get("email_notifications", True):
                    delivery_channels.append("email")
                if recipient.phone and preferences.get("sms_notifications", False):
                    delivery_channels.append("sms")
                
                # Always add in-app notification
                delivery_channels.append("–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ")
                
                # Create notification record
                notification_record_id = str(uuid.uuid4())
                
                notification_query = text("""
                    INSERT INTO employee_notifications 
                    (id, employee_id, notification_type, title, message, 
                     delivery_channels, delivery_time, status, created_at)
                    VALUES 
                    (:id, :employee_id, :type, :title, :message,
                     :channels, :delivery_time, :status, :created_at)
                    RETURNING id
                """)
                
                await db.execute(notification_query, {
                    'id': notification_record_id,
                    'employee_id': recipient.id,
                    'type': request.notification_type,
                    'title': f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏",
                    'message': final_message,
                    'channels': json.dumps(delivery_channels),
                    'delivery_time': delivery_time,
                    'status': 'scheduled' if delivery_time > datetime.utcnow() else 'sent',
                    'created_at': datetime.utcnow()
                })
                
                # Simulate actual delivery (in real system, integrate with email/SMS services)
                delivery_status = {}
                for channel in delivery_channels:
                    if channel == "email":
                        delivery_status[channel] = "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if recipient.email else "–Ω–µ_–Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
                    elif channel == "sms":
                        delivery_status[channel] = "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if recipient.phone else "–Ω–µ_–Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
                    else:
                        delivery_status[channel] = "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
                
                sent_notifications.append({
                    "notification_id": notification_record_id,
                    "recipient_id": str(recipient.id),
                    "–∏–º—è": f"{recipient.first_name} {recipient.last_name}",
                    "email": recipient.email or "–Ω–µ_—É–∫–∞–∑–∞–Ω",
                    "—Ç–µ–ª–µ—Ñ–æ–Ω": recipient.phone or "–Ω–µ_—É–∫–∞–∑–∞–Ω",
                    "–∫–∞–Ω–∞–ª—ã_–¥–æ—Å—Ç–∞–≤–∫–∏": delivery_channels,
                    "—Å—Ç–∞—Ç—É—Å_–¥–æ—Å—Ç–∞–≤–∫–∏": delivery_status,
                    "–≤—Ä–µ–º—è_–¥–æ—Å—Ç–∞–≤–∫–∏": delivery_time.isoformat(),
                    "—Å–æ–æ–±—â–µ–Ω–∏–µ": final_message
                })
                
            except Exception as e:
                failed_notifications.append({
                    "recipient_id": str(recipient.id),
                    "–∏–º—è": f"{recipient.first_name} {recipient.last_name}",
                    "–æ—à–∏–±–∫–∞": str(e),
                    "—Ç–∏–ø_–æ—à–∏–±–∫–∏": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π_—Å–±–æ–π"
                })
        
        # Create batch notification record
        current_time = datetime.utcnow()
        
        batch_notification_query = text("""
            INSERT INTO notification_batches 
            (id, notification_type, recipient_type, total_recipients,
             sent_count, failed_count, delivery_time, created_at)
            VALUES 
            (:id, :type, :recipient_type, :total, :sent, :failed, :delivery_time, :created_at)
        """)
        
        await db.execute(batch_notification_query, {
            'id': notification_id,
            'type': request.notification_type,
            'recipient_type': request.recipient_type,
            'total': len(recipients),
            'sent': len(sent_notifications),
            'failed': len(failed_notifications),
            'delivery_time': delivery_time,
            'created_at': current_time
        })
        
        await db.commit()
        
        # Build delivery status summary
        delivery_status = {
            "–æ–±—â–∏–µ_–ø–æ–ª—É—á–∞—Ç–µ–ª–∏": len(recipients),
            "—É—Å–ø–µ—à–Ω–æ_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": len(sent_notifications),
            "–Ω–µ—É–¥–∞—á–Ω—ã—Ö_–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π": len(failed_notifications),
            "–ø—Ä–æ—Ü–µ–Ω—Ç_—É—Å–ø–µ—Ö–∞": round((len(sent_notifications) / len(recipients) * 100) if recipients else 0, 1),
            "–≤—Ä–µ–º—è_–ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π_–¥–æ—Å—Ç–∞–≤–∫–∏": delivery_time.isoformat(),
            "—Å—Ç–∞—Ç—É—Å_–ø–∞–∫–µ—Ç–∞": "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ" if delivery_time > datetime.utcnow() else "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        }
        
        return NotificationResponse(
            notification_id=notification_id,
            delivery_status=delivery_status,
            sent_notifications=sent_notifications,
            failed_notifications=failed_notifications,
            message=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{request.notification_type}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: {len(sent_notifications)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {len(failed_notifications)} –Ω–µ—É–¥–∞—á–Ω–æ –∏–∑ {len(recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"
        )
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}"
        )

@router.get("/schedules/notifications/employee/{employee_id}", tags=["üî• REAL Schedule Management"])
async def get_employee_notifications(
    employee_id: UUID,
    status_filter: Optional[str] = None,
    days_back: Optional[int] = 7,
    db: AsyncSession = Depends(get_db)
):
    """Get notifications for specific employee"""
    try:
        conditions = ["en.employee_id = :employee_id"]
        params = {"employee_id": employee_id}
        
        if status_filter:
            conditions.append("en.status = :status")
            params["status"] = status_filter
        
        if days_back:
            cutoff_date = datetime.utcnow() - timedelta(days=days_back)
            conditions.append("en.created_at >= :cutoff_date")
            params["cutoff_date"] = cutoff_date
        
        notifications_query = text(f"""
            SELECT 
                en.id, en.notification_type, en.title, en.message,
                en.delivery_channels, en.delivery_time, en.status,
                en.read_at, en.created_at
            FROM employee_notifications en
            WHERE {' AND '.join(conditions)}
            ORDER BY en.created_at DESC
            LIMIT 50
        """)
        
        notifications_result = await db.execute(notifications_query, params)
        notifications = []
        
        for row in notifications_result.fetchall():
            channels = json.loads(row.delivery_channels) if row.delivery_channels else []
            notifications.append({
                "notification_id": str(row.id),
                "—Ç–∏–ø": row.notification_type,
                "–∑–∞–≥–æ–ª–æ–≤–æ–∫": row.title,
                "—Å–æ–æ–±—â–µ–Ω–∏–µ": row.message,
                "–∫–∞–Ω–∞–ª—ã_–¥–æ—Å—Ç–∞–≤–∫–∏": channels,
                "–≤—Ä–µ–º—è_–¥–æ—Å—Ç–∞–≤–∫–∏": row.delivery_time.isoformat() if row.delivery_time else None,
                "—Å—Ç–∞—Ç—É—Å": row.status,
                "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ": row.read_at.isoformat() if row.read_at else None,
                "—Å–æ–∑–¥–∞–Ω–æ": row.created_at.isoformat()
            })
        
        return {
            "employee_id": str(employee_id),
            "filter_status": status_filter or "–≤—Å–µ_—Å—Ç–∞—Ç—É—Å—ã",
            "period_days": days_back,
            "notifications": notifications,
            "total_notifications": len(notifications),
            "unread_count": len([n for n in notifications if not n["–ø—Ä–æ—á–∏—Ç–∞–Ω–æ"]])
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}"
        )

@router.put("/schedules/notifications/{notification_id}/mark-read", tags=["üî• REAL Schedule Management"])
async def mark_notification_read(
    notification_id: UUID,
    db: AsyncSession = Depends(get_db)
):
    """Mark notification as read"""
    try:
        update_query = text("""
            UPDATE employee_notifications 
            SET read_at = :read_time, status = 'read'
            WHERE id = :notification_id AND read_at IS NULL
            RETURNING id, employee_id
        """)
        
        result = await db.execute(update_query, {
            'notification_id': notification_id,
            'read_time': datetime.utcnow()
        })
        
        updated_notification = result.fetchone()
        
        if not updated_notification:
            raise HTTPException(
                status_code=404,
                detail=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ"
            )
        
        await db.commit()
        
        return {
            "notification_id": str(notification_id),
            "employee_id": str(updated_notification.employee_id),
            "status": "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ",
            "read_at": datetime.utcnow().isoformat(),
            "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"
        }
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}"
        )