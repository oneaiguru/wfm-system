"""
REAL SCHEDULE CONFLICT DETECTION ENDPOINT
Task 39/50: Advanced Conflict Detection and Resolution Analysis
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from pydantic import BaseModel
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any
from uuid import UUID
import json

from ...core.database import get_db

router = APIRouter()

class ConflictDetectionRequest(BaseModel):
    scope: str = "–æ—Ç–¥–µ–ª"  # –æ—Ç–¥–µ–ª, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –≤—Å–µ
    scope_id: Optional[UUID] = None
    detection_period_start: date
    detection_period_end: date
    conflict_types: List[str] = ["–≤—Ä–µ–º—è", "—Ä–µ—Å—É—Ä—Å—ã", "–Ω–∞–≤—ã–∫–∏", "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ_—á–∞—Å–æ–≤"]

class ConflictDetectionResponse(BaseModel):
    detection_id: str
    conflicts_found: List[Dict[str, Any]]
    conflict_summary: Dict[str, Any]
    resolution_suggestions: List[Dict[str, Any]]
    message: str

@router.post("/schedules/conflicts/detect", response_model=ConflictDetectionResponse, tags=["üî• REAL Schedule Conflicts"])
async def detect_schedule_conflicts(
    request: ConflictDetectionRequest,
    db: AsyncSession = Depends(get_db)
):
    """
    REAL CONFLICT DETECTION - NO MOCKS!
    
    Detects various types of schedule conflicts with resolution suggestions
    Uses real work_schedules_core and employees tables
    Supports Russian conflict types and scopes
    """
    try:
        # Build query based on scope
        conditions = [
            "ws.effective_date <= :end_date",
            "(ws.expiry_date IS NULL OR ws.expiry_date >= :start_date)",
            "ws.status IN ('active', 'pending', 'assigned')"
        ]
        params = {
            "start_date": request.detection_period_start,
            "end_date": request.detection_period_end
        }
        
        if request.scope == "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫" and request.scope_id:
            conditions.append("ws.employee_id = :scope_id")
            params["scope_id"] = request.scope_id
        elif request.scope == "–æ—Ç–¥–µ–ª" and request.scope_id:
            conditions.append("e.department_id = :scope_id")
            params["scope_id"] = request.scope_id
        
        # Get schedules in scope
        schedules_query = text(f"""
            SELECT 
                ws.id, ws.employee_id, ws.schedule_name, ws.shift_assignments,
                ws.total_hours, ws.effective_date, ws.expiry_date, ws.status,
                e.first_name, e.last_name, e.max_hours_per_week, e.skills,
                e.department_id, os.department_name
            FROM work_schedules_core ws
            JOIN employees e ON ws.employee_id = e.id
            JOIN organizational_structure os ON e.department_id = os.id
            WHERE {' AND '.join(conditions)}
            ORDER BY ws.employee_id, ws.effective_date
        """)
        
        schedules_result = await db.execute(schedules_query, params)
        schedules = schedules_result.fetchall()
        
        if not schedules:
            raise HTTPException(
                status_code=404,
                detail="–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –∏ –æ–±–ª–∞—Å—Ç–∏"
            )
        
        conflicts_found = []
        detection_id = str(uuid.uuid4())
        
        # Group schedules by employee for conflict detection
        employee_schedules = {}
        for schedule in schedules:
            emp_id = str(schedule.employee_id)
            if emp_id not in employee_schedules:
                employee_schedules[emp_id] = {
                    'employee': schedule,
                    'schedules': []
                }
            employee_schedules[emp_id]['schedules'].append(schedule)
        
        # Detect conflicts
        for emp_id, emp_data in employee_schedules.items():
            employee = emp_data['employee']
            emp_schedules = emp_data['schedules']
            
            # Time conflicts
            if "–≤—Ä–µ–º—è" in request.conflict_types:
                for i, schedule1 in enumerate(emp_schedules):
                    for schedule2 in emp_schedules[i+1:]:
                        # Check for overlapping periods
                        start1, end1 = schedule1.effective_date, schedule1.expiry_date or date(2030, 12, 31)
                        start2, end2 = schedule2.effective_date, schedule2.expiry_date or date(2030, 12, 31)
                        
                        if start1 <= end2 and start2 <= end1:
                            conflicts_found.append({
                                "—Ç–∏–ø_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞": "–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ_–≤—Ä–µ–º–µ–Ω–∏",
                                "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫": f"{employee.first_name} {employee.last_name}",
                                "employee_id": emp_id,
                                "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ1": {
                                    "id": str(schedule1.id),
                                    "–Ω–∞–∑–≤–∞–Ω–∏–µ": schedule1.schedule_name,
                                    "–ø–µ—Ä–∏–æ–¥": f"{start1} - {end1}"
                                },
                                "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ2": {
                                    "id": str(schedule2.id),
                                    "–Ω–∞–∑–≤–∞–Ω–∏–µ": schedule2.schedule_name,
                                    "–ø–µ—Ä–∏–æ–¥": f"{start2} - {end2}"
                                },
                                "–ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ": f"{max(start1, start2)} - {min(end1, end2)}",
                                "—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å": "–≤—ã—Å–æ–∫–∞—è"
                            })
            
            # Hours overflow conflicts
            if "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ_—á–∞—Å–æ–≤" in request.conflict_types:
                total_hours = sum(schedule.total_hours or 0 for schedule in emp_schedules)
                max_hours = employee.max_hours_per_week or 40
                
                # Calculate period in weeks
                period_days = (request.detection_period_end - request.detection_period_start).days + 1
                period_weeks = period_days / 7
                max_period_hours = max_hours * period_weeks
                
                if total_hours > max_period_hours:
                    conflicts_found.append({
                        "—Ç–∏–ø_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞": "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ_—á–∞—Å–æ–≤",
                        "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫": f"{employee.first_name} {employee.last_name}",
                        "employee_id": emp_id,
                        "–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ_—á–∞—Å—ã": total_hours,
                        "–º–∞–∫—Å–∏–º—É–º_—á–∞—Å–æ–≤": max_period_hours,
                        "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ": total_hours - max_period_hours,
                        "–ø–µ—Ä–∏–æ–¥_–Ω–µ–¥–µ–ª—å": round(period_weeks, 1),
                        "—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å": "—Å—Ä–µ–¥–Ω—è—è" if total_hours - max_period_hours <= 8 else "–≤—ã—Å–æ–∫–∞—è"
                    })
        
        # Detect resource conflicts (same time slot assignments)
        if "—Ä–µ—Å—É—Ä—Å—ã" in request.conflict_types:
            # Group all shifts by date and time
            time_slots = {}
            for schedule in schedules:
                shifts = json.loads(schedule.shift_assignments) if schedule.shift_assignments else []
                for shift in shifts:
                    shift_date = shift.get("–¥–∞—Ç–∞")
                    shift_start = shift.get("–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞")
                    shift_end = shift.get("–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è")
                    
                    if shift_date and shift_start:
                        slot_key = f"{shift_date}_{shift_start}_{shift_end}"
                        if slot_key not in time_slots:
                            time_slots[slot_key] = []
                        
                        time_slots[slot_key].append({
                            "schedule_id": str(schedule.id),
                            "employee_id": str(schedule.employee_id),
                            "employee_name": f"{schedule.first_name} {schedule.last_name}",
                            "shift": shift
                        })
            
            # Find overlapping assignments
            for slot_key, assignments in time_slots.items():
                if len(assignments) > 1:
                    # Check if employees are in same department (resource conflict)
                    departments = set()
                    for assignment in assignments:
                        emp_id = assignment["employee_id"]
                        if emp_id in employee_schedules:
                            departments.add(employee_schedules[emp_id]['employee'].department_id)
                    
                    if len(departments) == 1:  # Same department conflict
                        conflicts_found.append({
                            "—Ç–∏–ø_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞": "—Ä–µ—Å—É—Ä—Å–Ω—ã–π_–∫–æ–Ω—Ñ–ª–∏–∫—Ç",
                            "—Å–ª–æ—Ç_–≤—Ä–µ–º–µ–Ω–∏": slot_key.replace("_", " "),
                            "–æ—Ç–¥–µ–ª": employee_schedules[assignments[0]["employee_id"]]['employee'].department_name,
                            "–∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ_–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è": [
                                {
                                    "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫": a["employee_name"],
                                    "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": a["schedule_id"]
                                } for a in assignments
                            ],
                            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤": len(assignments),
                            "—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å": "—Å—Ä–µ–¥–Ω—è—è"
                        })
        
        # Generate resolution suggestions
        resolution_suggestions = []
        
        for conflict in conflicts_found:
            if conflict["—Ç–∏–ø_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"] == "–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ_–≤—Ä–µ–º–µ–Ω–∏":
                resolution_suggestions.append({
                    "–∫–æ–Ω—Ñ–ª–∏–∫—Ç_id": conflicts_found.index(conflict),
                    "–≤–∞—Ä–∏–∞–Ω—Ç—ã_—Ä–µ—à–µ–Ω–∏—è": [
                        "–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π",
                        "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ–¥–Ω–æ",
                        "–û—Ç–º–µ–Ω–∏—Ç—å –º–µ–Ω–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
                    ],
                    "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ": "–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –º–µ–Ω–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
                    "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ_—Ä–µ—à–µ–Ω–∏–µ": "–≤–æ–∑–º–æ–∂–Ω–æ"
                })
            
            elif conflict["—Ç–∏–ø_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"] == "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ_—á–∞—Å–æ–≤":
                resolution_suggestions.append({
                    "–∫–æ–Ω—Ñ–ª–∏–∫—Ç_id": conflicts_found.index(conflict),
                    "–≤–∞—Ä–∏–∞–Ω—Ç—ã_—Ä–µ—à–µ–Ω–∏—è": [
                        "–°–æ–∫—Ä–∞—Ç–∏—Ç—å —á–∞—Å—ã –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π",
                        "–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å—ã –Ω–∞ –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥",
                        "–ü–æ–ª—É—á–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ"
                    ],
                    "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ": f"–°–æ–∫—Ä–∞—Ç–∏—Ç—å –Ω–∞ {conflict['–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ']} —á–∞—Å–æ–≤",
                    "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ_—Ä–µ—à–µ–Ω–∏–µ": "—Ç—Ä–µ–±—É–µ—Ç_–æ–¥–æ–±—Ä–µ–Ω–∏—è"
                })
            
            elif conflict["—Ç–∏–ø_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"] == "—Ä–µ—Å—É—Ä—Å–Ω—ã–π_–∫–æ–Ω—Ñ–ª–∏–∫—Ç":
                resolution_suggestions.append({
                    "–∫–æ–Ω—Ñ–ª–∏–∫—Ç_id": conflicts_found.index(conflict),
                    "–≤–∞—Ä–∏–∞–Ω—Ç—ã_—Ä–µ—à–µ–Ω–∏—è": [
                        "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π",
                        "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é –¥–∞—Ç—É",
                        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞–∑–Ω—ã–º –ª–æ–∫–∞—Ü–∏—è–º"
                    ],
                    "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ_–¥–µ–π—Å—Ç–≤–∏–µ": "–°–¥–≤–∏–Ω—É—Ç—å –≤—Ä–µ–º—è –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                    "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ_—Ä–µ—à–µ–Ω–∏–µ": "–≤–æ–∑–º–æ–∂–Ω–æ"
                })
        
        # Build conflict summary
        conflict_summary = {
            "–≤—Å–µ–≥–æ_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤": len(conflicts_found),
            "–ø–æ_—Ç–∏–ø–∞–º": {},
            "–ø–æ_—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏": {},
            "–∑–∞—Ç—Ä–æ–Ω—É—Ç–æ_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤": len(set(c.get("employee_id") for c in conflicts_found if c.get("employee_id"))),
            "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏_—Ä–µ—à–∞–µ–º—ã—Ö": len([s for s in resolution_suggestions if s["–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ_—Ä–µ—à–µ–Ω–∏–µ"] == "–≤–æ–∑–º–æ–∂–Ω–æ"]),
            "–æ–±–ª–∞—Å—Ç—å_–∞–Ω–∞–ª–∏–∑–∞": request.scope,
            "–ø–µ—Ä–∏–æ–¥_–∞–Ω–∞–ª–∏–∑–∞": f"{request.detection_period_start} - {request.detection_period_end}"
        }
        
        # Count by types
        for conflict in conflicts_found:
            conflict_type = conflict["—Ç–∏–ø_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞"]
            severity = conflict.get("—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å", "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è")
            
            conflict_summary["–ø–æ_—Ç–∏–ø–∞–º"][conflict_type] = conflict_summary["–ø–æ_—Ç–∏–ø–∞–º"].get(conflict_type, 0) + 1
            conflict_summary["–ø–æ_—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"][severity] = conflict_summary["–ø–æ_—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏"].get(severity, 0) + 1
        
        # Store detection results
        current_time = datetime.utcnow()
        
        detection_record_query = text("""
            INSERT INTO conflict_detections 
            (id, scope_type, scope_id, detection_period_start, detection_period_end,
             conflicts_found, conflict_summary, resolution_suggestions, created_at)
            VALUES 
            (:id, :scope_type, :scope_id, :start_date, :end_date,
             :conflicts, :summary, :suggestions, :created_at)
        """)
        
        await db.execute(detection_record_query, {
            'id': detection_id,
            'scope_type': request.scope,
            'scope_id': request.scope_id,
            'start_date': request.detection_period_start,
            'end_date': request.detection_period_end,
            'conflicts': json.dumps(conflicts_found),
            'summary': json.dumps(conflict_summary),
            'suggestions': json.dumps(resolution_suggestions),
            'created_at': current_time
        })
        
        await db.commit()
        
        return ConflictDetectionResponse(
            detection_id=detection_id,
            conflicts_found=conflicts_found,
            conflict_summary=conflict_summary,
            resolution_suggestions=resolution_suggestions,
            message=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(conflicts_found)} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ '{request.scope}' –∑–∞ –ø–µ—Ä–∏–æ–¥ {request.detection_period_start} - {request.detection_period_end}"
        )
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {str(e)}"
        )