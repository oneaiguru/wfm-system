"""
REAL SCHEDULE CONFLICT RESOLUTION ENDPOINT
Task 40/50: Automated and Manual Conflict Resolution
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from pydantic import BaseModel
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any
from uuid import UUID
import uuid
import json

from ...core.database import get_db

router = APIRouter()

class ConflictResolutionRequest(BaseModel):
    conflict_detection_id: UUID
    resolution_strategy: str = "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ_—Ä–µ—à–µ–Ω–∏–µ"  # Russian resolution strategies
    manual_resolutions: Optional[List[Dict[str, Any]]] = None
    apply_immediately: Optional[bool] = True

class ConflictResolutionResponse(BaseModel):
    resolution_id: str
    resolved_conflicts: List[Dict[str, Any]]
    failed_resolutions: List[Dict[str, Any]]
    resolution_summary: Dict[str, Any]
    message: str

@router.post("/schedules/conflicts/resolve", response_model=ConflictResolutionResponse, tags=["üî• REAL Schedule Conflicts"])
async def resolve_schedule_conflicts(
    request: ConflictResolutionRequest,
    db: AsyncSession = Depends(get_db)
):
    """
    REAL CONFLICT RESOLUTION - NO MOCKS!
    
    Resolves schedule conflicts using automated or manual strategies
    Uses real conflict_detections and work_schedules_core tables
    Supports Russian resolution strategies
    """
    try:
        # Get conflict detection results
        detection_query = text("""
            SELECT conflicts_found, resolution_suggestions, conflict_summary
            FROM conflict_detections 
            WHERE id = :detection_id
        """)
        
        detection_result = await db.execute(detection_query, {"detection_id": request.conflict_detection_id})
        detection = detection_result.fetchone()
        
        if not detection:
            raise HTTPException(
                status_code=404,
                detail=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ {request.conflict_detection_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            )
        
        conflicts = json.loads(detection.conflicts_found) if detection.conflicts_found else []
        suggestions = json.loads(detection.resolution_suggestions) if detection.resolution_suggestions else []
        
        if not conflicts:
            raise HTTPException(
                status_code=422,
                detail="–ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è"
            )
        
        resolution_id = str(uuid.uuid4())
        current_time = datetime.utcnow()
        resolved_conflicts = []
        failed_resolutions = []
        
        # Process each conflict
        for i, conflict in enumerate(conflicts):
            conflict_type = conflict.get("—Ç–∏–ø_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞")
            
            try:
                if request.resolution_strategy == "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ_—Ä–µ—à–µ–Ω–∏–µ":
                    # Automatic resolution based on conflict type
                    if conflict_type == "–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ_–≤—Ä–µ–º–µ–Ω–∏":
                        # Resolve time overlap by adjusting less priority schedule
                        schedule1_id = conflict["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ1"]["id"]
                        schedule2_id = conflict["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ2"]["id"]
                        
                        # Get schedule priorities and statuses
                        priority_query = text("""
                            SELECT id, assignment_priority, status, created_at
                            FROM work_schedules_core 
                            WHERE id IN (:id1, :id2)
                        """)
                        
                        priority_result = await db.execute(priority_query, {
                            "id1": schedule1_id,
                            "id2": schedule2_id
                        })
                        
                        schedules_priority = {str(row.id): row for row in priority_result.fetchall()}
                        
                        # Determine which schedule to adjust (newer, lower priority)
                        if (schedules_priority[schedule1_id].assignment_priority == "–Ω–∏–∑–∫–∏–π" or
                            schedules_priority[schedule1_id].created_at > schedules_priority[schedule2_id].created_at):
                            adjust_schedule_id = schedule1_id
                            keep_schedule_id = schedule2_id
                        else:
                            adjust_schedule_id = schedule2_id
                            keep_schedule_id = schedule1_id
                        
                        # Shift the adjustable schedule by 1 day forward
                        shift_query = text("""
                            UPDATE work_schedules_core 
                            SET effective_date = effective_date + INTERVAL '1 day',
                                expiry_date = CASE 
                                    WHEN expiry_date IS NOT NULL THEN expiry_date + INTERVAL '1 day'
                                    ELSE NULL 
                                END,
                                updated_at = :updated_at,
                                resolution_note = :note
                            WHERE id = :schedule_id
                            RETURNING id, effective_date, expiry_date
                        """)
                        
                        shift_result = await db.execute(shift_query, {
                            'schedule_id': adjust_schedule_id,
                            'updated_at': current_time,
                            'note': f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (ID: {resolution_id})'
                        })
                        
                        updated_schedule = shift_result.fetchone()
                        
                        resolved_conflicts.append({
                            "–∫–æ–Ω—Ñ–ª–∏–∫—Ç": conflict,
                            "–º–µ—Ç–æ–¥_—Ä–µ—à–µ–Ω–∏—è": "—Å–¥–≤–∏–≥_–ø–æ_–≤—Ä–µ–º–µ–Ω–∏",
                            "–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": adjust_schedule_id,
                            "–Ω–æ–≤—ã–π_–ø–µ—Ä–∏–æ–¥": f"{updated_schedule.effective_date} - {updated_schedule.expiry_date}",
                            "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": keep_schedule_id
                        })
                    
                    elif conflict_type == "–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ_—á–∞—Å–æ–≤":
                        # Resolve hour overflow by reducing hours in latest schedule
                        employee_id = conflict["employee_id"]
                        
                        # Get employee's schedules ordered by creation date
                        schedules_query = text("""
                            SELECT id, total_hours, created_at
                            FROM work_schedules_core 
                            WHERE employee_id = :employee_id
                            AND status IN ('active', 'pending', 'assigned')
                            ORDER BY created_at DESC
                            LIMIT 1
                        """)
                        
                        latest_result = await db.execute(schedules_query, {"employee_id": employee_id})
                        latest_schedule = latest_result.fetchone()
                        
                        if latest_schedule:
                            # Reduce hours to resolve overflow
                            overflow_hours = conflict["–ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ"]
                            new_hours = max(latest_schedule.total_hours - overflow_hours, 20)  # Minimum 20 hours
                            
                            reduce_query = text("""
                                UPDATE work_schedules_core 
                                SET total_hours = :new_hours,
                                    updated_at = :updated_at,
                                    resolution_note = :note
                                WHERE id = :schedule_id
                                RETURNING id, total_hours
                            """)
                            
                            reduce_result = await db.execute(reduce_query, {
                                'schedule_id': latest_schedule.id,
                                'new_hours': new_hours,
                                'updated_at': current_time,
                                'note': f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ —á–∞—Å–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ (ID: {resolution_id})'
                            })
                            
                            updated_schedule = reduce_result.fetchone()
                            
                            resolved_conflicts.append({
                                "–∫–æ–Ω—Ñ–ª–∏–∫—Ç": conflict,
                                "–º–µ—Ç–æ–¥_—Ä–µ—à–µ–Ω–∏—è": "—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ_—á–∞—Å–æ–≤",
                                "–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": str(latest_schedule.id),
                                "—á–∞—Å—ã_–¥–æ": latest_schedule.total_hours,
                                "—á–∞—Å—ã_–ø–æ—Å–ª–µ": new_hours,
                                "—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ": overflow_hours
                            })
                    
                    elif conflict_type == "—Ä–µ—Å—É—Ä—Å–Ω—ã–π_–∫–æ–Ω—Ñ–ª–∏–∫—Ç":
                        # Resolve resource conflict by shifting time by 1 hour
                        assignments = conflict["–∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ_–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"]
                        if len(assignments) > 1:
                            # Shift the second assignment by 1 hour
                            second_assignment = assignments[1]
                            schedule_id = second_assignment["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]
                            
                            # Get and modify shift assignments
                            shifts_query = text("""
                                SELECT shift_assignments FROM work_schedules_core 
                                WHERE id = :schedule_id
                            """)
                            
                            shifts_result = await db.execute(shifts_query, {"schedule_id": schedule_id})
                            shifts_row = shifts_result.fetchone()
                            
                            if shifts_row and shifts_row.shift_assignments:
                                shifts = json.loads(shifts_row.shift_assignments)
                                
                                # Shift all shifts by 1 hour
                                for shift in shifts:
                                    if "–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞" in shift and "–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è" in shift:
                                        start_time = datetime.strptime(shift["–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞"], "%H:%M")
                                        end_time = datetime.strptime(shift["–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è"], "%H:%M")
                                        
                                        new_start = (start_time + timedelta(hours=1)).strftime("%H:%M")
                                        new_end = (end_time + timedelta(hours=1)).strftime("%H:%M")
                                        
                                        shift["–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞"] = new_start
                                        shift["–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è"] = new_end
                                
                                # Update schedule
                                update_shifts_query = text("""
                                    UPDATE work_schedules_core 
                                    SET shift_assignments = :new_shifts,
                                        updated_at = :updated_at,
                                        resolution_note = :note
                                    WHERE id = :schedule_id
                                """)
                                
                                await db.execute(update_shifts_query, {
                                    'schedule_id': schedule_id,
                                    'new_shifts': json.dumps(shifts),
                                    'updated_at': current_time,
                                    'note': f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ (ID: {resolution_id})'
                                })
                                
                                resolved_conflicts.append({
                                    "–∫–æ–Ω—Ñ–ª–∏–∫—Ç": conflict,
                                    "–º–µ—Ç–æ–¥_—Ä–µ—à–µ–Ω–∏—è": "—Å–¥–≤–∏–≥_–≤—Ä–µ–º–µ–Ω–∏",
                                    "–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": schedule_id,
                                    "—Å–¥–≤–∏–≥": "+1 —á–∞—Å"
                                })
                
                elif request.resolution_strategy == "—Ä—É—á–Ω–æ–µ_—Ä–µ—à–µ–Ω–∏–µ" and request.manual_resolutions:
                    # Apply manual resolution if provided
                    manual_resolution = None
                    for manual in request.manual_resolutions:
                        if manual.get("–∫–æ–Ω—Ñ–ª–∏–∫—Ç_–∏–Ω–¥–µ–∫—Å") == i:
                            manual_resolution = manual
                            break
                    
                    if manual_resolution:
                        action = manual_resolution.get("–¥–µ–π—Å—Ç–≤–∏–µ")
                        
                        if action == "–æ—Ç–º–µ–Ω–∏—Ç—å_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                            schedule_id = manual_resolution.get("schedule_id")
                            cancel_query = text("""
                                UPDATE work_schedules_core 
                                SET status = 'cancelled',
                                    updated_at = :updated_at,
                                    resolution_note = :note
                                WHERE id = :schedule_id
                            """)
                            
                            await db.execute(cancel_query, {
                                'schedule_id': schedule_id,
                                'updated_at': current_time,
                                'note': f'–†—É—á–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ (ID: {resolution_id})'
                            })
                            
                            resolved_conflicts.append({
                                "–∫–æ–Ω—Ñ–ª–∏–∫—Ç": conflict,
                                "–º–µ—Ç–æ–¥_—Ä–µ—à–µ–Ω–∏—è": "—Ä—É—á–Ω–∞—è_–æ—Ç–º–µ–Ω–∞",
                                "–æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": schedule_id
                            })
                
            except Exception as e:
                failed_resolutions.append({
                    "–∫–æ–Ω—Ñ–ª–∏–∫—Ç": conflict,
                    "–æ—à–∏–±–∫–∞": str(e),
                    "–∏–Ω–¥–µ–∫—Å": i
                })
        
        # Record resolution operation
        resolution_record_query = text("""
            INSERT INTO conflict_resolutions 
            (id, detection_id, resolution_strategy, resolved_count, failed_count,
             resolved_conflicts, failed_resolutions, created_at)
            VALUES 
            (:id, :detection_id, :strategy, :resolved, :failed,
             :resolved_data, :failed_data, :created_at)
        """)
        
        await db.execute(resolution_record_query, {
            'id': resolution_id,
            'detection_id': request.conflict_detection_id,
            'strategy': request.resolution_strategy,
            'resolved': len(resolved_conflicts),
            'failed': len(failed_resolutions),
            'resolved_data': json.dumps(resolved_conflicts),
            'failed_data': json.dumps(failed_resolutions),
            'created_at': current_time
        })
        
        await db.commit()
        
        resolution_summary = {
            "–≤—Å–µ–≥–æ_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤": len(conflicts),
            "—Ä–µ—à–µ–Ω–æ_–∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤": len(resolved_conflicts),
            "–Ω–µ—É–¥–∞—á–Ω—ã—Ö_—Ä–µ—à–µ–Ω–∏–π": len(failed_resolutions),
            "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è": request.resolution_strategy,
            "–ø—Ä–æ—Ü–µ–Ω—Ç_—É—Å–ø–µ—Ö–∞": round(len(resolved_conflicts) / len(conflicts) * 100, 1) if conflicts else 0,
            "–ø—Ä–∏–º–µ–Ω–µ–Ω–æ_–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ": request.apply_immediately
        }
        
        return ConflictResolutionResponse(
            resolution_id=resolution_id,
            resolved_conflicts=resolved_conflicts,
            failed_resolutions=failed_resolutions,
            resolution_summary=resolution_summary,
            message=f"–†–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(resolved_conflicts)} —Ä–µ—à–µ–Ω–æ, {len(failed_resolutions)} –Ω–µ—É–¥–∞—á–Ω–æ ({resolution_summary['–ø—Ä–æ—Ü–µ–Ω—Ç_—É—Å–ø–µ—Ö–∞']}% —É—Å–ø–µ—Ö–∞)"
        )
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {str(e)}"
        )