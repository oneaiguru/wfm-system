"""
REAL SCHEDULE RESOURCE OPTIMIZATION ENDPOINT
Task 48/50: Resource Optimization and Capacity Planning
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from pydantic import BaseModel
from datetime import datetime, date, timedelta
from typing import Optional, List, Dict, Any
from uuid import UUID
import uuid
import json

from ...core.database import get_db

router = APIRouter()

class ResourceOptimizationRequest(BaseModel):
    optimization_scope: str = "–æ—Ç–¥–µ–ª"
    scope_id: UUID
    optimization_period_start: date
    optimization_period_end: date
    optimization_goals: List[str] = ["–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è_–∑–∞—Ç—Ä–∞—Ç", "–º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è_–ø–æ–∫—Ä—ã—Ç–∏—è", "–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞_–Ω–∞–≥—Ä—É–∑–∫–∏"]
    constraints: Optional[Dict[str, Any]] = None

class ResourceOptimizationResponse(BaseModel):
    optimization_id: str
    current_state: Dict[str, Any]
    optimized_allocation: Dict[str, Any]
    improvement_metrics: Dict[str, Any]
    implementation_plan: List[Dict[str, Any]]
    message: str

@router.post("/schedules/optimization/resources", response_model=ResourceOptimizationResponse, tags=["üî• REAL Schedule Analytics"])
async def optimize_resource_allocation(
    request: ResourceOptimizationRequest,
    db: AsyncSession = Depends(get_db)
):
    """REAL RESOURCE OPTIMIZATION - NO MOCKS! Optimizes resource allocation"""
    try:
        # Get current resource allocation
        current_query = text("""
            SELECT 
                ws.id, ws.employee_id, ws.total_hours, ws.shift_assignments,
                ws.optimization_score, ws.status,
                e.first_name, e.last_name, e.position, e.skills,
                e.max_hours_per_week, e.hourly_rate,
                st.cost_per_hour, st.template_name,
                os.department_name
            FROM work_schedules_core ws
            JOIN employees e ON ws.employee_id = e.id
            JOIN organizational_structure os ON e.department_id = os.id
            LEFT JOIN schedule_templates st ON ws.template_id = st.id
            WHERE e.department_id = :scope_id
            AND ws.effective_date <= :end_date
            AND (ws.expiry_date IS NULL OR ws.expiry_date >= :start_date)
            AND ws.status IN ('active', 'pending', 'assigned')
        """)
        
        current_result = await db.execute(current_query, {
            "scope_id": request.scope_id,
            "start_date": request.optimization_period_start,
            "end_date": request.optimization_period_end
        })
        
        current_schedules = current_result.fetchall()
        
        if not current_schedules:
            raise HTTPException(
                status_code=404,
                detail="–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            )
        
        # Analyze current state
        total_current_hours = sum(s.total_hours or 0 for s in current_schedules)
        total_capacity_hours = sum(s.max_hours_per_week or 40 for s in current_schedules)
        avg_utilization = (total_current_hours / total_capacity_hours * 100) if total_capacity_hours > 0 else 0
        
        current_costs = []
        for schedule in current_schedules:
            cost_per_hour = schedule.cost_per_hour or schedule.hourly_rate or 1000
            schedule_cost = (schedule.total_hours or 0) * cost_per_hour
            current_costs.append(schedule_cost)
        
        total_current_cost = sum(current_costs)
        avg_optimization_score = sum(s.optimization_score or 0 for s in current_schedules) / len(current_schedules)
        
        current_state = {
            "–≤—Å–µ–≥–æ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π": len(current_schedules),
            "–æ–±—â–∏–µ_—á–∞—Å—ã": total_current_hours,
            "–æ–±—â–∞—è_–º–æ—â–Ω–æ—Å—Ç—å": total_capacity_hours,
            "—É—Ç–∏–ª–∏–∑–∞—Ü–∏—è_%": round(avg_utilization, 2),
            "–æ–±—â–∏–µ_–∑–∞—Ç—Ä–∞—Ç—ã": round(total_current_cost, 2),
            "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª_–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏": round(avg_optimization_score, 2),
            "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π_–ø–µ—Ä–∏–æ–¥": f"{request.optimization_period_start} - {request.optimization_period_end}"
        }
        
        # Optimization algorithms
        optimized_allocation = {"–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—Ä–µ—Å—É—Ä—Å—ã": []}
        
        # Group employees by skills for optimal allocation
        skill_groups = {}
        for schedule in current_schedules:
            skills = schedule.skills or "–æ–±—â–∏–µ"
            if skills not in skill_groups:
                skill_groups[skills] = []
            skill_groups[skills].append(schedule)
        
        # Apply optimization goals
        optimization_results = {
            "–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è_–∑–∞—Ç—Ä–∞—Ç": {},
            "–º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è_–ø–æ–∫—Ä—ã—Ç–∏—è": {},
            "–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞_–Ω–∞–≥—Ä—É–∑–∫–∏": {}
        }
        
        # Cost minimization optimization
        if "–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è_–∑–∞—Ç—Ä–∞—Ç" in request.optimization_goals:
            # Sort by cost efficiency (skills/cost ratio)
            cost_efficient_allocation = []
            
            for skill_group, employees in skill_groups.items():
                # Sort by cost per hour (ascending for cost efficiency)
                sorted_employees = sorted(employees, 
                    key=lambda e: (e.cost_per_hour or e.hourly_rate or 1000))
                
                # Redistribute hours to most cost-efficient employees first
                total_group_hours = sum(emp.total_hours or 0 for emp in employees)
                
                optimized_hours = []
                remaining_hours = total_group_hours
                
                for emp in sorted_employees:
                    max_hours = emp.max_hours_per_week or 40
                    allocated_hours = min(remaining_hours, max_hours)
                    remaining_hours -= allocated_hours
                    
                    if allocated_hours > 0:
                        cost_per_hour = emp.cost_per_hour or emp.hourly_rate or 1000
                        optimized_hours.append({
                            "employee_id": str(emp.employee_id),
                            "–∏–º—è": f"{emp.first_name} {emp.last_name}",
                            "—Ç–µ–∫—É—â–∏–µ_—á–∞—Å—ã": emp.total_hours or 0,
                            "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—á–∞—Å—ã": allocated_hours,
                            "—Å—Ç–æ–∏–º–æ—Å—Ç—å_—á–∞—Å": cost_per_hour,
                            "—ç–∫–æ–Ω–æ–º–∏—è": (emp.total_hours or 0 - allocated_hours) * cost_per_hour,
                            "–≥—Ä—É–ø–ø–∞_–Ω–∞–≤—ã–∫–æ–≤": skill_group
                        })
                
                cost_efficient_allocation.extend(optimized_hours)
            
            # Calculate cost savings
            new_total_cost = sum(emp["–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—á–∞—Å—ã"] * emp["—Å—Ç–æ–∏–º–æ—Å—Ç—å_—á–∞—Å"] 
                               for emp in cost_efficient_allocation)
            cost_savings = total_current_cost - new_total_cost
            
            optimization_results["–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è_–∑–∞—Ç—Ä–∞—Ç"] = {
                "–Ω–æ–≤—ã–µ_–∑–∞—Ç—Ä–∞—Ç—ã": round(new_total_cost, 2),
                "—ç–∫–æ–Ω–æ–º–∏—è": round(cost_savings, 2),
                "–ø—Ä–æ—Ü–µ–Ω—Ç_—ç–∫–æ–Ω–æ–º–∏–∏": round((cost_savings / total_current_cost * 100) if total_current_cost > 0 else 0, 2),
                "–ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏": len(cost_efficient_allocation)
            }
        
        # Coverage maximization
        if "–º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è_–ø–æ–∫—Ä—ã—Ç–∏—è" in request.optimization_goals:
            # Identify coverage gaps and optimize allocation
            period_days = (request.optimization_period_end - request.optimization_period_start).days + 1
            
            # Analyze current coverage by parsing shift assignments
            daily_coverage = {}
            for schedule in current_schedules:
                shifts = json.loads(schedule.shift_assignments) if schedule.shift_assignments else []
                for shift in shifts:
                    shift_date = shift.get("–¥–∞—Ç–∞")
                    if shift_date:
                        if shift_date not in daily_coverage:
                            daily_coverage[shift_date] = 0
                        daily_coverage[shift_date] += 1
            
            # Find days with low coverage
            min_required_coverage = len(current_schedules) // 3  # At least 1/3 of staff
            coverage_gaps = [date for date, count in daily_coverage.items() 
                           if count < min_required_coverage]
            
            optimization_results["–º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è_–ø–æ–∫—Ä—ã—Ç–∏—è"] = {
                "—Ç–µ–∫—É—â–µ–µ_—Å—Ä–µ–¥–Ω–µ–µ_–ø–æ–∫—Ä—ã—Ç–∏–µ": round(sum(daily_coverage.values()) / len(daily_coverage), 1) if daily_coverage else 0,
                "–¥–Ω–µ–π_—Å_–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º_–ø–æ–∫—Ä—ã—Ç–∏–µ–º": len(coverage_gaps),
                "–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ_—Ç—Ä–µ–±—É–µ–º–æ–µ_–ø–æ–∫—Ä—ã—Ç–∏–µ": min_required_coverage,
                "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–º–µ–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è" if coverage_gaps else "–ü–æ–∫—Ä—ã—Ç–∏–µ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ"
            }
        
        # Load balancing
        if "–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞_–Ω–∞–≥—Ä—É–∑–∫–∏" in request.optimization_goals:
            # Calculate standard deviation of hours
            hours_distribution = [s.total_hours or 0 for s in current_schedules]
            mean_hours = sum(hours_distribution) / len(hours_distribution)
            variance = sum((h - mean_hours) ** 2 for h in hours_distribution) / len(hours_distribution)
            std_deviation = variance ** 0.5
            
            # Propose balanced allocation
            target_hours_per_employee = total_current_hours / len(current_schedules)
            balanced_allocation = []
            
            for schedule in current_schedules:
                current_hours = schedule.total_hours or 0
                max_hours = schedule.max_hours_per_week or 40
                
                # Balance towards target, respecting constraints
                balanced_hours = min(target_hours_per_employee, max_hours)
                hours_change = balanced_hours - current_hours
                
                balanced_allocation.append({
                    "employee_id": str(schedule.employee_id),
                    "–∏–º—è": f"{schedule.first_name} {schedule.last_name}",
                    "—Ç–µ–∫—É—â–∏–µ_—á–∞—Å—ã": current_hours,
                    "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—á–∞—Å—ã": balanced_hours,
                    "–∏–∑–º–µ–Ω–µ–Ω–∏–µ": hours_change,
                    "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ_–æ—Ç_—Å—Ä–µ–¥–Ω–µ–≥–æ": abs(current_hours - mean_hours)
                })
            
            # Calculate new standard deviation
            new_hours = [emp["—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—á–∞—Å—ã"] for emp in balanced_allocation]
            new_std = (sum((h - target_hours_per_employee) ** 2 for h in new_hours) / len(new_hours)) ** 0.5
            
            optimization_results["–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞_–Ω–∞–≥—Ä—É–∑–∫–∏"] = {
                "—Ç–µ–∫—É—â–µ–µ_—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": round(std_deviation, 2),
                "–Ω–æ–≤–æ–µ_—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": round(new_std, 2),
                "—É–ª—É—á—à–µ–Ω–∏–µ_–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏": round(((std_deviation - new_std) / std_deviation * 100) if std_deviation > 0 else 0, 2),
                "—Ü–µ–ª–µ–≤—ã–µ_—á–∞—Å—ã_–Ω–∞_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞": round(target_hours_per_employee, 1),
                "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏_—Ç—Ä–µ–±—É—é—â–∏–µ_–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏": len([emp for emp in balanced_allocation if abs(emp["–∏–∑–º–µ–Ω–µ–Ω–∏–µ"]) > 2])
            }
        
        # Compile optimized allocation
        optimized_allocation = {
            "–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ_—Ä–µ—Å—É—Ä—Å—ã": balanced_allocation if "–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞_–Ω–∞–≥—Ä—É–∑–∫–∏" in request.optimization_goals else cost_efficient_allocation if "–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è_–∑–∞—Ç—Ä–∞—Ç" in request.optimization_goals else [],
            "—Ü–µ–ª–∏_–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏": request.optimization_goals,
            "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã_–ø–æ_—Ü–µ–ª—è–º": optimization_results
        }
        
        # Calculate improvement metrics
        potential_cost_savings = optimization_results.get("–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è_–∑–∞—Ç—Ä–∞—Ç", {}).get("—ç–∫–æ–Ω–æ–º–∏—è", 0)
        coverage_improvement = len(coverage_gaps) if "–º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è_–ø–æ–∫—Ä—ã—Ç–∏—è" in optimization_results else 0
        balance_improvement = optimization_results.get("–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞_–Ω–∞–≥—Ä—É–∑–∫–∏", {}).get("—É–ª—É—á—à–µ–Ω–∏–µ_–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏", 0)
        
        improvement_metrics = {
            "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è_—ç–∫–æ–Ω–æ–º–∏—è": round(potential_cost_savings, 2),
            "—É–ª—É—á—à–µ–Ω–∏–µ_–ø–æ–∫—Ä—ã—Ç–∏—è": f"–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ {coverage_improvement} –ø—Ä–æ–±–µ–ª–æ–≤" if coverage_improvement > 0 else "–ü–æ–∫—Ä—ã—Ç–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ",
            "—É–ª—É—á—à–µ–Ω–∏–µ_–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏": f"{balance_improvement:.1f}%" if balance_improvement > 0 else "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞",
            "–æ–±—â–∏–π_–±–∞–ª–ª_—É–ª—É—á—à–µ–Ω–∏—è": round((
                min(100, potential_cost_savings / total_current_cost * 100 * 10) + 
                min(100, balance_improvement) + 
                (50 if coverage_improvement == 0 else max(0, 50 - coverage_improvement * 10))
            ) / 3, 1)
        }
        
        # Generate implementation plan
        implementation_plan = []
        
        if potential_cost_savings > total_current_cost * 0.05:  # >5% savings
            implementation_plan.append({
                "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç": 1,
                "–¥–µ–π—Å—Ç–≤–∏–µ": "–ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∑–∞—Ç—Ä–∞—Ç",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": f"–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞—Ç—Ä–∞—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ {potential_cost_savings:.0f} —Ä—É–±.",
                "—Å—Ä–æ–∫": "1-2 –Ω–µ–¥–µ–ª–∏",
                "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": "–º–µ–Ω–µ–¥–∂–µ—Ä_–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
            })
        
        if coverage_improvement > 0:
            implementation_plan.append({
                "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç": 2,
                "–¥–µ–π—Å—Ç–≤–∏–µ": "–£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": f"–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ {coverage_improvement} –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –ø–æ–∫—Ä—ã—Ç–∏–∏",
                "—Å—Ä–æ–∫": "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ",
                "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": "—Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä_—Å–º–µ–Ω"
            })
        
        if balance_improvement > 10:
            implementation_plan.append({
                "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç": 3,
                "–¥–µ–π—Å—Ç–≤–∏–µ": "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": f"–£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ {balance_improvement:.1f}%",
                "—Å—Ä–æ–∫": "1 –Ω–µ–¥–µ–ª—è",
                "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": "hr_–º–µ–Ω–µ–¥–∂–µ—Ä"
            })
        
        if not implementation_plan:
            implementation_plan.append({
                "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç": 1,
                "–¥–µ–π—Å—Ç–≤–∏–µ": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–†–µ—Å—É—Ä—Å—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                "—Å—Ä–æ–∫": "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ",
                "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π": "–∞–Ω–∞–ª–∏—Ç–∏–∫"
            })
        
        # Store optimization record
        optimization_id = str(uuid.uuid4())
        current_time = datetime.utcnow()
        
        optimization_record_query = text("""
            INSERT INTO resource_optimizations 
            (id, optimization_scope, scope_id, period_start, period_end,
             current_state, optimized_allocation, improvement_metrics, created_at)
            VALUES 
            (:id, :scope, :scope_id, :start_date, :end_date,
             :current, :optimized, :improvements, :created_at)
        """)
        
        await db.execute(optimization_record_query, {
            'id': optimization_id,
            'scope': request.optimization_scope,
            'scope_id': request.scope_id,
            'start_date': request.optimization_period_start,
            'end_date': request.optimization_period_end,
            'current': json.dumps(current_state),
            'optimized': json.dumps(optimized_allocation),
            'improvements': json.dumps(improvement_metrics),
            'created_at': current_time
        })
        
        await db.commit()
        
        return ResourceOptimizationResponse(
            optimization_id=optimization_id,
            current_state=current_state,
            optimized_allocation=optimized_allocation,
            improvement_metrics=improvement_metrics,
            implementation_plan=implementation_plan,
            message=f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—â–∏–π –±–∞–ª–ª —É–ª—É—á—à–µ–Ω–∏—è {improvement_metrics['–æ–±—â–∏–π_–±–∞–ª–ª_—É–ª—É—á—à–µ–Ω–∏—è']:.1f}%, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è {potential_cost_savings:.0f} —Ä—É–±."
        )
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {str(e)}"
        )