"""
REAL SCHEDULE TEMPLATE ANALYTICS ENDPOINT
Task 35/50: Template Usage Analytics and Performance Metrics
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from pydantic import BaseModel
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any
from uuid import UUID
import json

from ...core.database import get_db

router = APIRouter()

class TemplateAnalyticsRequest(BaseModel):
    template_ids: Optional[List[UUID]] = None
    department_id: Optional[UUID] = None
    analysis_period_days: Optional[int] = 30
    include_archived: Optional[bool] = False
    metrics: List[str] = ["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]

class TemplateAnalyticsResponse(BaseModel):
    analysis_period: str
    template_metrics: List[Dict[str, Any]]
    department_summary: Dict[str, Any]
    performance_rankings: Dict[str, Any]
    recommendations: List[str]
    trends_analysis: Dict[str, Any]
    message: str

@router.post("/schedules/templates/analytics", response_model=TemplateAnalyticsResponse, tags=["üî• REAL Schedule Templates"])
async def analyze_template_performance(
    request: TemplateAnalyticsRequest,
    db: AsyncSession = Depends(get_db)
):
    """
    REAL TEMPLATE ANALYTICS AND PERFORMANCE ANALYSIS - NO MOCKS!
    
    Analyzes template usage, efficiency, and performance metrics
    Uses real schedule_templates, work_schedules_core, and feedback tables
    Supports Russian analytics categories and recommendations
    
    UNBLOCKS: Template optimization and decision-making workflows
    """
    try:
        # Calculate analysis period
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=request.analysis_period_days)
        
        # Build query conditions
        conditions = ["ws.created_at >= :start_date", "ws.created_at <= :end_date"]
        params = {"start_date": start_date, "end_date": end_date}
        
        if request.template_ids:
            template_ids_str = "'" + "','".join(str(tid) for tid in request.template_ids) + "'"
            conditions.append(f"st.id IN ({template_ids_str})")
        
        if request.department_id:
            conditions.append("st.department_id = :department_id")
            params["department_id"] = request.department_id
        
        if not request.include_archived:
            conditions.append("st.is_active = true")
        
        # Main analytics query
        analytics_query = text(f"""
            SELECT 
                st.id,
                st.template_name,
                st.template_type,
                st.cost_per_hour,
                st.working_hours_per_day,
                st.working_days_per_week,
                st.is_active,
                st.created_at as template_created,
                os.department_name,
                os.department_type,
                
                -- Usage metrics
                COUNT(ws.id) as total_usage,
                COUNT(CASE WHEN ws.status = 'active' THEN 1 END) as active_usage,
                COUNT(CASE WHEN ws.status = 'completed' THEN 1 END) as completed_usage,
                
                -- Time metrics
                AVG(ws.total_hours) as avg_hours_per_schedule,
                SUM(ws.total_hours) as total_hours_scheduled,
                
                -- Efficiency metrics
                AVG(ws.optimization_score) as avg_optimization_score,
                MIN(ws.optimization_score) as min_optimization_score,
                MAX(ws.optimization_score) as max_optimization_score,
                
                -- Cost metrics
                SUM(ws.total_hours * st.cost_per_hour) as total_cost,
                AVG(ws.total_hours * st.cost_per_hour) as avg_cost_per_schedule,
                
                -- Timing metrics
                MIN(ws.created_at) as first_usage,
                MAX(ws.created_at) as last_usage
                
            FROM schedule_templates st
            JOIN organizational_structure os ON st.department_id = os.id
            LEFT JOIN work_schedules_core ws ON ws.template_id = st.id 
                AND {' AND '.join(conditions)}
            GROUP BY st.id, st.template_name, st.template_type, st.cost_per_hour,
                     st.working_hours_per_day, st.working_days_per_week, st.is_active,
                     st.created_at, os.department_name, os.department_type
            ORDER BY total_usage DESC, avg_optimization_score DESC
        """)
        
        result = await db.execute(analytics_query, params)
        templates_data = result.fetchall()
        
        if not templates_data:
            raise HTTPException(
                status_code=404,
                detail="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ"
            )
        
        # Get user feedback data
        feedback_query = text(f"""
            SELECT 
                tf.template_id,
                AVG(tf.satisfaction_score) as avg_satisfaction,
                COUNT(tf.id) as feedback_count,
                COUNT(CASE WHEN tf.satisfaction_score >= 4 THEN 1 END) as positive_feedback,
                COUNT(CASE WHEN tf.satisfaction_score <= 2 THEN 1 END) as negative_feedback
            FROM template_feedback tf
            WHERE tf.created_at >= :start_date 
            AND tf.created_at <= :end_date
            GROUP BY tf.template_id
        """)
        
        feedback_result = await db.execute(feedback_query, params)
        feedback_data = {str(row.template_id): row for row in feedback_result.fetchall()}
        
        # Process template metrics
        template_metrics = []
        all_usage_counts = []
        all_efficiency_scores = []
        all_costs = []
        all_satisfaction_scores = []
        
        for template in templates_data:
            template_id = str(template.id)
            feedback = feedback_data.get(template_id)
            
            # Calculate efficiency metrics
            usage_count = template.total_usage or 0
            avg_optimization = template.avg_optimization_score or 0
            total_cost = template.total_cost or 0
            satisfaction = feedback.avg_satisfaction if feedback else 0
            
            # Usage efficiency
            days_since_creation = (end_date - template.template_created).days
            usage_frequency = usage_count / max(days_since_creation, 1) if days_since_creation > 0 else 0
            
            # Cost efficiency
            weekly_capacity = template.working_hours_per_day * template.working_days_per_week
            cost_efficiency = weekly_capacity / template.cost_per_hour if template.cost_per_hour > 0 else 0
            
            # Performance rating
            performance_factors = []
            if usage_count > 0:
                performance_factors.append(min(usage_count / 10, 1.0))  # Usage factor (max 1.0)
            if avg_optimization > 0:
                performance_factors.append(avg_optimization / 100)  # Optimization factor
            if satisfaction > 0:
                performance_factors.append(satisfaction / 5)  # Satisfaction factor
            
            overall_performance = sum(performance_factors) / len(performance_factors) if performance_factors else 0
            
            metrics_data = {
                "template_id": template_id,
                "–Ω–∞–∑–≤–∞–Ω–∏–µ": template.template_name,
                "—Ç–∏–ø": template.template_type,
                "–æ—Ç–¥–µ–ª": template.department_name,
                "–∞–∫—Ç–∏–≤–Ω—ã–π": template.is_active,
                
                # Usage metrics
                "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ": {
                    "–≤—Å–µ–≥–æ_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π": usage_count,
                    "–∞–∫—Ç–∏–≤–Ω—ã—Ö_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π": template.active_usage or 0,
                    "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π": template.completed_usage or 0,
                    "—á–∞—Å—Ç–æ—Ç–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": round(usage_frequency, 3),
                    "–ø–µ—Ä–≤–æ–µ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ": template.first_usage.isoformat() if template.first_usage else None,
                    "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ": template.last_usage.isoformat() if template.last_usage else None
                },
                
                # Efficiency metrics
                "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": {
                    "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª_–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏": round(avg_optimization, 2),
                    "–¥–∏–∞–ø–∞–∑–æ–Ω_–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏": f"{template.min_optimization_score or 0} - {template.max_optimization_score or 0}",
                    "—Å—Ä–µ–¥–Ω–∏–µ_—á–∞—Å—ã_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": round(template.avg_hours_per_schedule or 0, 1),
                    "–æ–±—â–∏–µ_—á–∞—Å—ã": template.total_hours_scheduled or 0,
                    "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç_—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": round(overall_performance * 100, 1)
                },
                
                # Cost metrics
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å": {
                    "–æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å": round(total_cost, 2),
                    "—Å—Ä–µ–¥–Ω—è—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ": round(template.avg_cost_per_schedule or 0, 2),
                    "—Å—Ç–æ–∏–º–æ—Å—Ç—å_—á–∞—Å": template.cost_per_hour,
                    "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å_–∑–∞—Ç—Ä–∞—Ç": round(cost_efficiency, 2),
                    "–Ω–µ–¥–µ–ª—å–Ω–∞—è_–º–æ—â–Ω–æ—Å—Ç—å": weekly_capacity
                },
                
                # Satisfaction metrics
                "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å": {
                    "—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞": round(satisfaction, 2) if satisfaction > 0 else "–Ω–µ—Ç_–¥–∞–Ω–Ω—ã—Ö",
                    "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–æ—Ç–∑—ã–≤–æ–≤": feedback.feedback_count if feedback else 0,
                    "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö_–æ—Ç–∑—ã–≤–æ–≤": feedback.positive_feedback if feedback else 0,
                    "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö_–æ—Ç–∑—ã–≤–æ–≤": feedback.negative_feedback if feedback else 0,
                    "–ø—Ä–æ—Ü–µ–Ω—Ç_—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏": round((feedback.positive_feedback / feedback.feedback_count * 100) if feedback and feedback.feedback_count > 0 else 0, 1)
                }
            }
            
            template_metrics.append(metrics_data)
            
            # Collect data for rankings
            all_usage_counts.append((template_id, usage_count))
            all_efficiency_scores.append((template_id, avg_optimization))
            all_costs.append((template_id, total_cost))
            all_satisfaction_scores.append((template_id, satisfaction))
        
        # Calculate department summary
        total_templates = len(template_metrics)
        active_templates = sum(1 for t in template_metrics if t["–∞–∫—Ç–∏–≤–Ω—ã–π"])
        total_usage = sum(t["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"]["–≤—Å–µ–≥–æ_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π"] for t in template_metrics)
        total_cost = sum(t["—Å—Ç–æ–∏–º–æ—Å—Ç—å"]["–æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å"] for t in template_metrics)
        avg_satisfaction = sum(t["—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]["—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞"] for t in template_metrics if isinstance(t["—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]["—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞"], (int, float))) / max(1, sum(1 for t in template_metrics if isinstance(t["—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]["—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞"], (int, float))))
        
        department_summary = {
            "–≤—Å–µ–≥–æ_—à–∞–±–ª–æ–Ω–æ–≤": total_templates,
            "–∞–∫—Ç–∏–≤–Ω—ã—Ö_—à–∞–±–ª–æ–Ω–æ–≤": active_templates,
            "–∞—Ä—Ö–∏–≤–Ω—ã—Ö_—à–∞–±–ª–æ–Ω–æ–≤": total_templates - active_templates,
            "–æ–±—â–µ–µ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ": total_usage,
            "–æ–±—â–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å": round(total_cost, 2),
            "—Å—Ä–µ–¥–Ω—è—è_—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å": round(avg_satisfaction, 2) if avg_satisfaction > 0 else "–Ω–µ—Ç_–¥–∞–Ω–Ω—ã—Ö",
            "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π_–ø–µ—Ä–∏–æ–¥": f"{request.analysis_period_days} –¥–Ω–µ–π"
        }
        
        # Performance rankings
        performance_rankings = {
            "—Ç–æ–ø_–ø–æ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é": [
                {"template_id": tid, "–Ω–∞–∑–≤–∞–Ω–∏–µ": next(t["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for t in template_metrics if t["template_id"] == tid), "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π": count}
                for tid, count in sorted(all_usage_counts, key=lambda x: x[1], reverse=True)[:5]
            ],
            "—Ç–æ–ø_–ø–æ_—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": [
                {"template_id": tid, "–Ω–∞–∑–≤–∞–Ω–∏–µ": next(t["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for t in template_metrics if t["template_id"] == tid), "–±–∞–ª–ª": score}
                for tid, score in sorted(all_efficiency_scores, key=lambda x: x[1], reverse=True)[:5]
                if score > 0
            ],
            "—Å–∞–º—ã–µ_–¥–æ—Ä–æ–≥–∏–µ": [
                {"template_id": tid, "–Ω–∞–∑–≤–∞–Ω–∏–µ": next(t["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for t in template_metrics if t["template_id"] == tid), "—Å—Ç–æ–∏–º–æ—Å—Ç—å": cost}
                for tid, cost in sorted(all_costs, key=lambda x: x[1], reverse=True)[:5]
                if cost > 0
            ],
            "–ª—É—á—à–∏–µ_–ø–æ_–æ—Ç–∑—ã–≤–∞–º": [
                {"template_id": tid, "–Ω–∞–∑–≤–∞–Ω–∏–µ": next(t["–Ω–∞–∑–≤–∞–Ω–∏–µ"] for t in template_metrics if t["template_id"] == tid), "–æ—Ü–µ–Ω–∫–∞": score}
                for tid, score in sorted(all_satisfaction_scores, key=lambda x: x[1], reverse=True)[:5]
                if score > 0
            ]
        }
        
        # Generate recommendations
        recommendations = []
        
        # Usage recommendations
        unused_templates = [t for t in template_metrics if t["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"]["–≤—Å–µ–≥–æ_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π"] == 0]
        if unused_templates:
            recommendations.append(f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏—é {len(unused_templates)} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
        
        # Efficiency recommendations
        low_efficiency = [t for t in template_metrics if t["—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]["—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª_–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"] < 70 and t["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"]["–≤—Å–µ–≥–æ_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π"] > 0]
        if low_efficiency:
            recommendations.append(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ {len(low_efficiency)} —à–∞–±–ª–æ–Ω–æ–≤ —Å –Ω–∏–∑–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (< 70%)")
        
        # Cost recommendations
        high_cost_low_usage = [t for t in template_metrics if t["—Å—Ç–æ–∏–º–æ—Å—Ç—å"]["—Å—Ç–æ–∏–º–æ—Å—Ç—å_—á–∞—Å"] > 1500 and t["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"]["–≤—Å–µ–≥–æ_–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–π"] < 5]
        if high_cost_low_usage:
            recommendations.append(f"–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ {len(high_cost_low_usage)} –¥–æ—Ä–æ–≥–∏—Ö –º–∞–ª–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
        
        # Satisfaction recommendations
        low_satisfaction = [t for t in template_metrics if isinstance(t["—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]["—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞"], (int, float)) and t["—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]["—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞"] < 3]
        if low_satisfaction:
            recommendations.append(f"–£–ª—É—á—à–∏—Ç–µ {len(low_satisfaction)} —à–∞–±–ª–æ–Ω–æ–≤ —Å –Ω–∏–∑–∫–æ–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (< 3.0)")
        
        if not recommendations:
            recommendations.append("–®–∞–±–ª–æ–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ö–æ—Ä–æ—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        # Trends analysis
        recent_period = 7  # Last 7 days
        recent_start = end_date - timedelta(days=recent_period)
        
        trends_query = text(f"""
            SELECT 
                COUNT(*) as recent_usage,
                AVG(optimization_score) as recent_avg_optimization
            FROM work_schedules_core ws
            JOIN schedule_templates st ON ws.template_id = st.id
            WHERE ws.created_at >= :recent_start
            AND ws.created_at <= :end_date
            {"AND st.department_id = :department_id" if request.department_id else ""}
        """)
        
        trends_params = {"recent_start": recent_start, "end_date": end_date}
        if request.department_id:
            trends_params["department_id"] = request.department_id
        
        trends_result = await db.execute(trends_query, trends_params)
        trends_row = trends_result.fetchone()
        
        trends_analysis = {
            "–ø–æ—Å–ª–µ–¥–Ω–∏–µ_7_–¥–Ω–µ–π": {
                "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π": trends_row.recent_usage or 0,
                "—Å—Ä–µ–¥–Ω—è—è_—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": round(trends_row.recent_avg_optimization or 0, 2)
            },
            "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_—Å_–ø–µ—Ä–∏–æ–¥–æ–º": {
                "—Ç–µ–Ω–¥–µ–Ω—Ü–∏—è_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "—Ä–∞—Å—Ç–µ—Ç" if (trends_row.recent_usage or 0) > (total_usage / request.analysis_period_days * 7) else "—Å–Ω–∏–∂–∞–µ—Ç—Å—è",
                "–∏–∑–º–µ–Ω–µ–Ω–∏–µ_—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏": "—É–ª—É—á—à–∞–µ—Ç—Å—è" if (trends_row.recent_avg_optimization or 0) > sum(t["—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]["—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª_–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"] for t in template_metrics) / len(template_metrics) else "—É—Ö—É–¥—à–∞–µ—Ç—Å—è"
            }
        }
        
        return TemplateAnalyticsResponse(
            analysis_period=f"{start_date.date()} - {end_date.date()}",
            template_metrics=template_metrics,
            department_summary=department_summary,
            performance_rankings=performance_rankings,
            recommendations=recommendations,
            trends_analysis=trends_analysis,
            message=f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_templates} —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞ {request.analysis_period_days} –¥–Ω–µ–π. –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {total_usage}, —Å—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {department_summary['—Å—Ä–µ–¥–Ω—è—è_—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å']}"
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}"
        )

@router.get("/schedules/templates/{template_id}/analytics/detailed", tags=["üî• REAL Schedule Templates"])
async def get_detailed_template_analytics(
    template_id: UUID,
    days_back: Optional[int] = 90,
    db: AsyncSession = Depends(get_db)
):
    """Get detailed analytics for a specific template"""
    try:
        end_date = datetime.utcnow()
        start_date = end_date - timedelta(days=days_back)
        
        # Template details
        template_query = text("""
            SELECT 
                st.*,
                os.department_name
            FROM schedule_templates st
            JOIN organizational_structure os ON st.department_id = os.id
            WHERE st.id = :template_id
        """)
        
        template_result = await db.execute(template_query, {"template_id": template_id})
        template = template_result.fetchone()
        
        if not template:
            raise HTTPException(
                status_code=404,
                detail=f"–®–∞–±–ª–æ–Ω {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # Usage timeline
        timeline_query = text("""
            SELECT 
                DATE(ws.created_at) as usage_date,
                COUNT(*) as daily_usage,
                AVG(ws.optimization_score) as daily_avg_score,
                SUM(ws.total_hours) as daily_hours
            FROM work_schedules_core ws
            WHERE ws.template_id = :template_id
            AND ws.created_at >= :start_date
            AND ws.created_at <= :end_date
            GROUP BY DATE(ws.created_at)
            ORDER BY usage_date
        """)
        
        timeline_result = await db.execute(timeline_query, {
            "template_id": template_id,
            "start_date": start_date,
            "end_date": end_date
        })
        
        usage_timeline = []
        for row in timeline_result.fetchall():
            usage_timeline.append({
                "–¥–∞—Ç–∞": row.usage_date.isoformat(),
                "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π": row.daily_usage,
                "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª": round(row.daily_avg_score or 0, 2),
                "—á–∞—Å—ã": row.daily_hours or 0
            })
        
        return {
            "template_id": str(template_id),
            "template_details": {
                "–Ω–∞–∑–≤–∞–Ω–∏–µ": template.template_name,
                "—Ç–∏–ø": template.template_type,
                "–æ—Ç–¥–µ–ª": template.department_name,
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å_—á–∞—Å": template.cost_per_hour,
                "—á–∞—Å—ã_–¥–µ–Ω—å": template.working_hours_per_day,
                "–¥–Ω–∏_–Ω–µ–¥–µ–ª—è": template.working_days_per_week,
                "–∞–∫—Ç–∏–≤–Ω—ã–π": template.is_active
            },
            "analysis_period": f"{start_date.date()} - {end_date.date()}",
            "usage_timeline": usage_timeline,
            "timeline_summary": {
                "–≤—Å–µ–≥–æ_–¥–Ω–µ–π_—Å_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º": len(usage_timeline),
                "–æ–±—â–∏–µ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": sum(day["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"] for day in usage_timeline),
                "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª_–ø–µ—Ä–∏–æ–¥": round(sum(day["—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª"] for day in usage_timeline) / len(usage_timeline), 2) if usage_timeline else 0,
                "–æ–±—â–∏–µ_—á–∞—Å—ã": sum(day["—á–∞—Å—ã"] for day in usage_timeline)
            }
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}"
        )