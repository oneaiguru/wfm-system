"""
REAL SCHEDULE TEMPLATE CREATION ENDPOINT
Task 31/50: Schedule Template Creation and Management
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from pydantic import BaseModel
from datetime import datetime, time
from typing import Optional, List, Dict, Any
from uuid import UUID
import uuid
import json

from ...core.database import get_db

router = APIRouter()

class ScheduleTemplateCreate(BaseModel):
    template_name: str
    template_type: str = "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"  # Russian template types
    department_id: UUID
    shift_structure: Dict[str, Any]
    working_hours_per_day: float = 8.0
    working_days_per_week: int = 5
    break_duration_minutes: Optional[int] = 60
    lunch_break_minutes: Optional[int] = 30
    overtime_rules: Optional[Dict[str, Any]] = None
    holiday_rules: Optional[Dict[str, Any]] = None
    rotation_pattern: Optional[str] = None

class ScheduleTemplateResponse(BaseModel):
    template_id: str
    template_name: str
    template_type: str
    department_id: str
    shift_structure: Dict[str, Any]
    template_settings: Dict[str, Any]
    validation_status: str
    usage_statistics: Dict[str, Any]
    message: str

@router.post("/schedules/templates/create", response_model=ScheduleTemplateResponse, tags=["üî• REAL Schedule Templates"])
async def create_schedule_template(
    request: ScheduleTemplateCreate,
    db: AsyncSession = Depends(get_db)
):
    """
    REAL SCHEDULE TEMPLATE CREATION - NO MOCKS!
    
    Creates reusable schedule templates for departments
    Uses real schedule_templates and organizational_structure tables
    Supports Russian template types and shift structures
    
    UNBLOCKS: Template-based scheduling workflows
    """
    try:
        # Validate department exists
        dept_check = text("""
            SELECT id, department_name, department_type
            FROM organizational_structure 
            WHERE id = :department_id
        """)
        
        dept_result = await db.execute(dept_check, {"department_id": request.department_id})
        department = dept_result.fetchone()
        
        if not department:
            raise HTTPException(
                status_code=404,
                detail=f"–û—Ç–¥–µ–ª {request.department_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # Check for duplicate template names in department
        duplicate_check = text("""
            SELECT COUNT(*) as count
            FROM schedule_templates 
            WHERE department_id = :department_id 
            AND template_name = :template_name
            AND is_active = true
        """)
        
        duplicate_result = await db.execute(duplicate_check, {
            "department_id": request.department_id,
            "template_name": request.template_name
        })
        
        if duplicate_result.scalar() > 0:
            raise HTTPException(
                status_code=422,
                detail=f"–®–∞–±–ª–æ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{request.template_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–¥–µ–ª–µ '{department.department_name}'"
            )
        
        # Validate shift structure
        required_shift_fields = ["—Ä–∞–±–æ—á–∏–µ_–¥–Ω–∏", "–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞", "–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è"]
        shift_validation = {
            "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ_–ø–æ–ª—è": all(field in request.shift_structure for field in required_shift_fields),
            "–Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ_–ø–æ–ª—è": [field for field in required_shift_fields if field not in request.shift_structure]
        }
        
        if not shift_validation["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ_–ø–æ–ª—è"]:
            raise HTTPException(
                status_code=422,
                detail=f"–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–º–µ–Ω—ã: {shift_validation['–Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ_–ø–æ–ª—è']}"
            )
        
        # Validate working hours
        if request.working_hours_per_day < 1 or request.working_hours_per_day > 24:
            raise HTTPException(
                status_code=422,
                detail="–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –≤ –¥–µ–Ω—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 24"
            )
        
        if request.working_days_per_week < 1 or request.working_days_per_week > 7:
            raise HTTPException(
                status_code=422,
                detail="–†–∞–±–æ—á–∏–µ –¥–Ω–∏ –≤ –Ω–µ–¥–µ–ª—é –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 7"
            )
        
        # Calculate template metrics
        total_weekly_hours = request.working_hours_per_day * request.working_days_per_week
        break_time_daily = (request.break_duration_minutes or 0) + (request.lunch_break_minutes or 0)
        net_working_hours_daily = request.working_hours_per_day - (break_time_daily / 60)
        
        # Determine cost per hour based on template type and department
        cost_mapping = {
            "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π": 1000,
            "—Å–º–µ–Ω–Ω—ã–π": 1200,
            "–≥–∏–±–∫–∏–π": 1100,
            "–≤—ã—Ö–æ–¥–Ω–æ–π": 1500,
            "–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π": 1800
        }
        base_cost_per_hour = cost_mapping.get(request.template_type, 1000)
        
        # Build template settings
        template_settings = {
            "—Ä–∞–±–æ—á–∏–µ_—á–∞—Å—ã_–¥–µ–Ω—å": request.working_hours_per_day,
            "—Ä–∞–±–æ—á–∏–µ_–¥–Ω–∏_–Ω–µ–¥–µ–ª—è": request.working_days_per_week,
            "–æ–±—â–∏–µ_—á–∞—Å—ã_–Ω–µ–¥–µ–ª—è": total_weekly_hours,
            "–ø–µ—Ä–µ—Ä—ã–≤—ã_–º–∏–Ω—É—Ç—ã": request.break_duration_minutes or 0,
            "–æ–±–µ–¥_–º–∏–Ω—É—Ç—ã": request.lunch_break_minutes or 0,
            "—á–∏—Å—Ç—ã–µ_—á–∞—Å—ã_–¥–µ–Ω—å": net_working_hours_daily,
            "–±–∞–∑–æ–≤–∞—è_—Å—Ç–æ–∏–º–æ—Å—Ç—å_—á–∞—Å": base_cost_per_hour,
            "–ø–∞—Ç—Ç–µ—Ä–Ω_—Ä–æ—Ç–∞—Ü–∏–∏": request.rotation_pattern,
            "–ø—Ä–∞–≤–∏–ª–∞_–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏": request.overtime_rules or {},
            "–ø—Ä–∞–≤–∏–ª–∞_–ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤": request.holiday_rules or {}
        }
        
        # Validation status
        validation_checks = {
            "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞_—Å–º–µ–Ω—ã": shift_validation["–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ_–ø–æ–ª—è"],
            "—Ä–∞–±–æ—á–∏–µ_—á–∞—Å—ã": 1 <= request.working_hours_per_day <= 24,
            "—Ä–∞–±–æ—á–∏–µ_–¥–Ω–∏": 1 <= request.working_days_per_week <= 7,
            "–æ—Ç–¥–µ–ª_—Å—É—â–µ—Å—Ç–≤—É–µ—Ç": bool(department),
            "—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ": True  # Already checked above
        }
        
        validation_status = "–≤–∞–ª–∏–¥–Ω—ã–π" if all(validation_checks.values()) else "—Ç—Ä–µ–±—É–µ—Ç_–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
        
        # Create template record
        template_id = str(uuid.uuid4())
        current_time = datetime.utcnow()
        
        template_query = text("""
            INSERT INTO schedule_templates 
            (id, template_name, template_type, department_id, shift_structure,
             working_hours_per_day, working_days_per_week, break_duration_minutes,
             lunch_break_minutes, cost_per_hour, template_settings, 
             validation_status, is_active, created_at, updated_at)
            VALUES 
            (:id, :name, :type, :dept_id, :structure,
             :hours_day, :days_week, :break_min,
             :lunch_min, :cost_hour, :settings,
             :validation, :active, :created, :updated)
            RETURNING id
        """)
        
        await db.execute(template_query, {
            'id': template_id,
            'name': request.template_name,
            'type': request.template_type,
            'dept_id': request.department_id,
            'structure': json.dumps(request.shift_structure),
            'hours_day': request.working_hours_per_day,
            'days_week': request.working_days_per_week,
            'break_min': request.break_duration_minutes or 0,
            'lunch_min': request.lunch_break_minutes or 0,
            'cost_hour': base_cost_per_hour,
            'settings': json.dumps(template_settings),
            'validation': validation_status,
            'active': validation_status == "–≤–∞–ª–∏–¥–Ω—ã–π",
            'created': current_time,
            'updated': current_time
        })
        
        await db.commit()
        
        # Initialize usage statistics
        usage_statistics = {
            "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π": 0,
            "–∞–∫—Ç–∏–≤–Ω—ã—Ö_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π": 0,
            "—Å—Ä–µ–¥–Ω—è—è_—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 0,
            "–æ—Ç–∑—ã–≤—ã_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": 0,
            "–¥–∞—Ç–∞_—Å–æ–∑–¥–∞–Ω–∏—è": current_time.isoformat(),
            "—Å—Ç–∞—Ç—É—Å": "–Ω–æ–≤—ã–π"
        }
        
        return ScheduleTemplateResponse(
            template_id=template_id,
            template_name=request.template_name,
            template_type=request.template_type,
            department_id=str(request.department_id),
            shift_structure=request.shift_structure,
            template_settings=template_settings,
            validation_status=validation_status,
            usage_statistics=usage_statistics,
            message=f"–®–∞–±–ª–æ–Ω —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è '{request.template_name}' —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç–¥–µ–ª–∞ '{department.department_name}'. –°—Ç–∞—Ç—É—Å: {validation_status}"
        )
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
        )

@router.get("/schedules/templates/department/{department_id}", tags=["üî• REAL Schedule Templates"])
async def get_department_templates(
    department_id: UUID,
    template_type: Optional[str] = None,
    active_only: Optional[bool] = True,
    db: AsyncSession = Depends(get_db)
):
    """Get all schedule templates for a department"""
    try:
        query_conditions = ["st.department_id = :department_id"]
        params = {"department_id": department_id}
        
        if template_type:
            query_conditions.append("st.template_type = :template_type")
            params["template_type"] = template_type
            
        if active_only:
            query_conditions.append("st.is_active = true")
        
        query = text(f"""
            SELECT 
                st.id,
                st.template_name,
                st.template_type,
                st.working_hours_per_day,
                st.working_days_per_week,
                st.cost_per_hour,
                st.validation_status,
                st.is_active,
                st.created_at,
                st.updated_at,
                os.department_name,
                COUNT(ws.id) as usage_count
            FROM schedule_templates st
            JOIN organizational_structure os ON st.department_id = os.id
            LEFT JOIN work_schedules_core ws ON ws.template_id = st.id
            WHERE {' AND '.join(query_conditions)}
            GROUP BY st.id, st.template_name, st.template_type, st.working_hours_per_day,
                     st.working_days_per_week, st.cost_per_hour, st.validation_status,
                     st.is_active, st.created_at, st.updated_at, os.department_name
            ORDER BY st.created_at DESC
        """)
        
        result = await db.execute(query, params)
        templates = []
        
        for row in result.fetchall():
            total_weekly_hours = row.working_hours_per_day * row.working_days_per_week
            
            templates.append({
                "template_id": str(row.id),
                "–Ω–∞–∑–≤–∞–Ω–∏–µ": row.template_name,
                "—Ç–∏–ø": row.template_type,
                "—á–∞—Å—ã_–¥–µ–Ω—å": row.working_hours_per_day,
                "–¥–Ω–∏_–Ω–µ–¥–µ–ª—è": row.working_days_per_week,
                "—á–∞—Å—ã_–Ω–µ–¥–µ–ª—è": total_weekly_hours,
                "—Å—Ç–æ–∏–º–æ—Å—Ç—å_—á–∞—Å": row.cost_per_hour,
                "—Å—Ç–∞—Ç—É—Å_–≤–∞–ª–∏–¥–∞—Ü–∏–∏": row.validation_status,
                "–∞–∫—Ç–∏–≤–Ω—ã–π": row.is_active,
                "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π": row.usage_count,
                "–æ—Ç–¥–µ–ª": row.department_name,
                "—Å–æ–∑–¥–∞–Ω": row.created_at.isoformat(),
                "–æ–±–Ω–æ–≤–ª–µ–Ω": row.updated_at.isoformat()
            })
        
        return {
            "department_id": str(department_id),
            "filter_type": template_type or "–≤—Å–µ_—Ç–∏–ø—ã",
            "active_only": active_only,
            "templates": templates,
            "total_templates": len(templates)
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–¥–µ–ª–∞: {str(e)}"
        )

@router.get("/schedules/templates/{template_id}/details", tags=["üî• REAL Schedule Templates"])
async def get_template_details(
    template_id: UUID,
    db: AsyncSession = Depends(get_db)
):
    """Get detailed information about a specific template"""
    try:
        query = text("""
            SELECT 
                st.*,
                os.department_name,
                COUNT(ws.id) as current_usage,
                AVG(ws.optimization_score) as avg_optimization_score
            FROM schedule_templates st
            JOIN organizational_structure os ON st.department_id = os.id
            LEFT JOIN work_schedules_core ws ON ws.template_id = st.id 
                AND ws.status IN ('active', 'pending')
            WHERE st.id = :template_id
            GROUP BY st.id, os.department_name
        """)
        
        result = await db.execute(query, {"template_id": template_id})
        template = result.fetchone()
        
        if not template:
            raise HTTPException(
                status_code=404,
                detail=f"–®–∞–±–ª–æ–Ω {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        shift_structure = json.loads(template.shift_structure) if template.shift_structure else {}
        template_settings = json.loads(template.template_settings) if template.template_settings else {}
        
        return {
            "template_id": str(template.id),
            "–Ω–∞–∑–≤–∞–Ω–∏–µ": template.template_name,
            "—Ç–∏–ø": template.template_type,
            "–æ—Ç–¥–µ–ª": template.department_name,
            "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞_—Å–º–µ–Ω—ã": shift_structure,
            "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏": template_settings,
            "—á–∞—Å—ã_–¥–µ–Ω—å": template.working_hours_per_day,
            "–¥–Ω–∏_–Ω–µ–¥–µ–ª—è": template.working_days_per_week,
            "–ø–µ—Ä–µ—Ä—ã–≤_–º–∏–Ω—É—Ç—ã": template.break_duration_minutes,
            "–æ–±–µ–¥_–º–∏–Ω—É—Ç—ã": template.lunch_break_minutes,
            "—Å—Ç–æ–∏–º–æ—Å—Ç—å_—á–∞—Å": template.cost_per_hour,
            "—Å—Ç–∞—Ç—É—Å_–≤–∞–ª–∏–¥–∞—Ü–∏–∏": template.validation_status,
            "–∞–∫—Ç–∏–≤–Ω—ã–π": template.is_active,
            "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": {
                "—Ç–µ–∫—É—â–∏–µ_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": template.current_usage or 0,
                "—Å—Ä–µ–¥–Ω–∏–π_–±–∞–ª–ª_–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏": round(template.avg_optimization_score or 0, 2),
                "—Å—Ç–∞—Ç—É—Å_–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏": "–ø–æ–ø—É–ª—è—Ä–Ω—ã–π" if (template.current_usage or 0) > 5 else "–æ–±—ã—á–Ω—ã–π"
            },
            "—Å–æ–∑–¥–∞–Ω": template.created_at.isoformat(),
            "–æ–±–Ω–æ–≤–ª–µ–Ω": template.updated_at.isoformat()
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —à–∞–±–ª–æ–Ω–∞: {str(e)}"
        )