"""
REAL SCHEDULE SHIFT MODIFICATION ENDPOINT
Task 37/50: Live Schedule Modification and Shift Updates
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from pydantic import BaseModel
from datetime import datetime, date
from typing import Optional, List, Dict, Any
from uuid import UUID
import uuid
import json

from ...core.database import get_db

router = APIRouter()

class ShiftModificationRequest(BaseModel):
    schedule_id: UUID
    modifications: List[Dict[str, Any]]  # List of shift changes
    modification_reason: str = "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"  # Russian text
    effective_immediately: Optional[bool] = True
    notify_affected: Optional[bool] = True

class ShiftModificationResponse(BaseModel):
    modification_id: str
    schedule_id: str
    applied_changes: List[Dict[str, Any]]
    schedule_summary: Dict[str, Any]
    validation_results: Dict[str, Any]
    message: str

@router.put("/schedules/modify/shifts", response_model=ShiftModificationResponse, tags=["üî• REAL Schedule Assignments"])
async def modify_schedule_shifts(
    request: ShiftModificationRequest,
    db: AsyncSession = Depends(get_db)
):
    """
    REAL SCHEDULE SHIFT MODIFICATION - NO MOCKS!
    
    Modifies existing schedule shifts with validation and history tracking
    Uses real work_schedules_core and schedule_modifications tables
    Supports Russian modification reasons and immediate updates
    
    UNBLOCKS: Live schedule editing workflows
    """
    try:
        # Get existing schedule
        schedule_query = text("""
            SELECT 
                ws.*,
                e.first_name, e.last_name, e.max_hours_per_week,
                st.template_name
            FROM work_schedules_core ws
            JOIN employees e ON ws.employee_id = e.id
            LEFT JOIN schedule_templates st ON ws.template_id = st.id
            WHERE ws.id = :schedule_id
        """)
        
        schedule_result = await db.execute(schedule_query, {"schedule_id": request.schedule_id})
        schedule = schedule_result.fetchone()
        
        if not schedule:
            raise HTTPException(
                status_code=404,
                detail=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {request.schedule_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            )
        
        if schedule.status not in ['active', 'pending', 'assigned']:
            raise HTTPException(
                status_code=422,
                detail=f"–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{schedule.status}'"
            )
        
        # Parse existing shifts
        existing_shifts = json.loads(schedule.shift_assignments) if schedule.shift_assignments else []
        modified_shifts = existing_shifts.copy()
        applied_changes = []
        
        # Apply modifications
        for mod in request.modifications:
            mod_type = mod.get("—Ç–∏–ø", "")
            
            if mod_type == "–æ–±–Ω–æ–≤–∏—Ç—å_—Å–º–µ–Ω—É":
                shift_date = mod.get("–¥–∞—Ç–∞")
                if not shift_date:
                    continue
                
                # Find and update existing shift
                for i, shift in enumerate(modified_shifts):
                    if shift.get("–¥–∞—Ç–∞") == shift_date:
                        old_shift = shift.copy()
                        
                        # Apply updates
                        if "–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞" in mod:
                            shift["–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞"] = mod["–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞"]
                        if "–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è" in mod:
                            shift["–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è"] = mod["–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è"]
                        if "—á–∞—Å—ã" in mod:
                            shift["—á–∞—Å—ã"] = mod["—á–∞—Å—ã"]
                        if "—Ç–∏–ø_—Å–º–µ–Ω—ã" in mod:
                            shift["—Ç–∏–ø_—Å–º–µ–Ω—ã"] = mod["—Ç–∏–ø_—Å–º–µ–Ω—ã"]
                        
                        shift["–∏–∑–º–µ–Ω–µ–Ω–æ"] = datetime.utcnow().isoformat()
                        
                        applied_changes.append({
                            "—Ç–∏–ø": "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ_—Å–º–µ–Ω—ã",
                            "–¥–∞—Ç–∞": shift_date,
                            "—Å—Ç–∞—Ä—ã–µ_–∑–Ω–∞—á–µ–Ω–∏—è": old_shift,
                            "–Ω–æ–≤—ã–µ_–∑–Ω–∞—á–µ–Ω–∏—è": shift
                        })
                        break
            
            elif mod_type == "–¥–æ–±–∞–≤–∏—Ç—å_—Å–º–µ–Ω—É":
                new_shift = {
                    "–¥–∞—Ç–∞": mod.get("–¥–∞—Ç–∞"),
                    "–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞": mod.get("–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞", "09:00"),
                    "–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è": mod.get("–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è", "17:00"),
                    "—á–∞—Å—ã": mod.get("—á–∞—Å—ã", 8),
                    "—Ç–∏–ø_—Å–º–µ–Ω—ã": mod.get("—Ç–∏–ø_—Å–º–µ–Ω—ã", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è"),
                    "–¥–æ–±–∞–≤–ª–µ–Ω–æ": datetime.utcnow().isoformat()
                }
                
                modified_shifts.append(new_shift)
                applied_changes.append({
                    "—Ç–∏–ø": "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ_—Å–º–µ–Ω—ã",
                    "–Ω–æ–≤–∞—è_—Å–º–µ–Ω–∞": new_shift
                })
            
            elif mod_type == "—É–¥–∞–ª–∏—Ç—å_—Å–º–µ–Ω—É":
                shift_date = mod.get("–¥–∞—Ç–∞")
                original_count = len(modified_shifts)
                modified_shifts = [s for s in modified_shifts if s.get("–¥–∞—Ç–∞") != shift_date]
                
                if len(modified_shifts) < original_count:
                    applied_changes.append({
                        "—Ç–∏–ø": "—É–¥–∞–ª–µ–Ω–∏–µ_—Å–º–µ–Ω—ã",
                        "–¥–∞—Ç–∞": shift_date
                    })
        
        # Validate modifications
        validation_results = {
            "–æ–±—â–∏–µ_–ø—Ä–æ–≤–µ—Ä–∫–∏": {},
            "—á–∞—Å–æ–≤—ã–µ_–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è": {},
            "–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã_–≤—Ä–µ–º–µ–Ω–∏": [],
            "—Å—Ç–∞—Ç—É—Å": "–≤–∞–ª–∏–¥–Ω–æ"
        }
        
        # Calculate new totals
        new_total_hours = sum(shift.get("—á–∞—Å—ã", 0) for shift in modified_shifts)
        hours_change = new_total_hours - (schedule.total_hours or 0)
        
        # Check hours constraints
        period_days = (schedule.expiry_date - schedule.effective_date).days + 1 if schedule.expiry_date else 7
        weeks = period_days / 7
        max_weekly_hours = schedule.max_hours_per_week or 40
        max_total_hours = max_weekly_hours * weeks
        
        validation_results["—á–∞—Å–æ–≤—ã–µ_–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"] = {
            "–Ω–æ–≤—ã–µ_–æ–±—â–∏–µ_—á–∞—Å—ã": new_total_hours,
            "–∏–∑–º–µ–Ω–µ–Ω–∏–µ_—á–∞—Å–æ–≤": hours_change,
            "–º–∞–∫—Å–∏–º—É–º_–¥–ª—è_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞": max_total_hours,
            "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç_–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º": new_total_hours <= max_total_hours
        }
        
        # Check for time conflicts within the same day
        date_groups = {}
        for shift in modified_shifts:
            shift_date = shift.get("–¥–∞—Ç–∞")
            if shift_date not in date_groups:
                date_groups[shift_date] = []
            date_groups[shift_date].append(shift)
        
        for date_str, day_shifts in date_groups.items():
            if len(day_shifts) > 1:
                # Check for overlapping times
                for i, shift1 in enumerate(day_shifts):
                    for j, shift2 in enumerate(day_shifts[i+1:], i+1):
                        start1 = shift1.get("–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞", "00:00")
                        end1 = shift1.get("–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è", "23:59")
                        start2 = shift2.get("–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞", "00:00") 
                        end2 = shift2.get("–≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è", "23:59")
                        
                        if start1 < end2 and start2 < end1:  # Overlap detected
                            validation_results["–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã_–≤—Ä–µ–º–µ–Ω–∏"].append({
                                "–¥–∞—Ç–∞": date_str,
                                "—Å–º–µ–Ω–∞1": f"{start1}-{end1}",
                                "—Å–º–µ–Ω–∞2": f"{start2}-{end2}",
                                "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω"
                            })
        
        validation_results["–æ–±—â–∏–µ_–ø—Ä–æ–≤–µ—Ä–∫–∏"] = {
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–º–µ–Ω": len(modified_shifts),
            "–∏–∑–º–µ–Ω–µ–Ω–∏–π_–ø—Ä–∏–º–µ–Ω–µ–Ω–æ": len(applied_changes),
            "–µ—Å—Ç—å_–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã_–≤—Ä–µ–º–µ–Ω–∏": len(validation_results["–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã_–≤—Ä–µ–º–µ–Ω–∏"]) > 0
        }
        
        # Check overall validation
        if (not validation_results["—á–∞—Å–æ–≤—ã–µ_–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"]["—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç_–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"] or 
            validation_results["–æ–±—â–∏–µ_–ø—Ä–æ–≤–µ—Ä–∫–∏"]["–µ—Å—Ç—å_–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã_–≤—Ä–µ–º–µ–Ω–∏"]):
            validation_results["—Å—Ç–∞—Ç—É—Å"] = "—Ç—Ä–µ–±—É–µ—Ç_–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
            
            error_details = []
            if not validation_results["—á–∞—Å–æ–≤—ã–µ_–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"]["—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç_–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º"]:
                error_details.append(f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —á–∞—Å–æ–≤: {new_total_hours} > {max_total_hours}")
            if validation_results["–æ–±—â–∏–µ_–ø—Ä–æ–≤–µ—Ä–∫–∏"]["–µ—Å—Ç—å_–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã_–≤—Ä–µ–º–µ–Ω–∏"]:
                error_details.append(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏: {len(validation_results['–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã_–≤—Ä–µ–º–µ–Ω–∏'])}")
            
            raise HTTPException(
                status_code=422,
                detail=f"–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {'; '.join(error_details)}"
            )
        
        # Apply modifications to database
        modification_id = str(uuid.uuid4())
        current_time = datetime.utcnow()
        
        # Update schedule
        update_query = text("""
            UPDATE work_schedules_core 
            SET shift_assignments = :new_shifts,
                total_hours = :new_hours,
                last_modified = :modified_time,
                updated_at = :updated_at
            WHERE id = :schedule_id
            RETURNING id
        """)
        
        await db.execute(update_query, {
            'schedule_id': request.schedule_id,
            'new_shifts': json.dumps(modified_shifts),
            'new_hours': new_total_hours,
            'modified_time': current_time,
            'updated_at': current_time
        })
        
        # Record modification history
        history_query = text("""
            INSERT INTO schedule_modifications 
            (id, schedule_id, modification_type, modification_reason,
             changes_applied, old_total_hours, new_total_hours, created_at)
            VALUES 
            (:id, :schedule_id, :type, :reason,
             :changes, :old_hours, :new_hours, :created_at)
        """)
        
        await db.execute(history_query, {
            'id': modification_id,
            'schedule_id': request.schedule_id,
            'type': 'shift_modification',
            'reason': request.modification_reason,
            'changes': json.dumps(applied_changes),
            'old_hours': schedule.total_hours,
            'new_hours': new_total_hours,
            'created_at': current_time
        })
        
        # Send notifications if requested
        if request.notify_affected:
            notification_query = text("""
                INSERT INTO employee_notifications 
                (id, employee_id, notification_type, title, message, created_at)
                VALUES 
                (:id, :employee_id, :type, :title, :message, :created_at)
            """)
            
            await db.execute(notification_query, {
                'id': str(uuid.uuid4()),
                'employee_id': schedule.employee_id,
                'type': 'schedule_modification',
                'title': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è',
                'message': f'–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ. –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {len(applied_changes)}. –ù–æ–≤—ã–µ —á–∞—Å—ã: {new_total_hours}',
                'created_at': current_time
            })
        
        await db.commit()
        
        # Build schedule summary
        schedule_summary = {
            "schedule_id": str(request.schedule_id),
            "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫": f"{schedule.first_name} {schedule.last_name}",
            "–ø–µ—Ä–∏–æ–¥": f"{schedule.effective_date} - {schedule.expiry_date}" if schedule.expiry_date else f"—Å {schedule.effective_date}",
            "—à–∞–±–ª–æ–Ω": schedule.template_name or "–±–µ–∑_—à–∞–±–ª–æ–Ω–∞",
            "—Å—Ç–∞—Ç—É—Å": schedule.status,
            "—á–∞—Å—ã_–¥–æ": schedule.total_hours,
            "—á–∞—Å—ã_–ø–æ—Å–ª–µ": new_total_hours,
            "–∏–∑–º–µ–Ω–µ–Ω–∏–µ": hours_change,
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–º–µ–Ω": len(modified_shifts),
            "–ø–æ—Å–ª–µ–¥–Ω–µ–µ_–∏–∑–º–µ–Ω–µ–Ω–∏–µ": current_time.isoformat()
        }
        
        return ShiftModificationResponse(
            modification_id=modification_id,
            schedule_id=str(request.schedule_id),
            applied_changes=applied_changes,
            schedule_summary=schedule_summary,
            validation_results=validation_results,
            message=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {len(applied_changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ. –ß–∞—Å—ã: {schedule.total_hours} ‚Üí {new_total_hours}"
        )
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"
        )